#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ä—É—Å—Å–∫–∏—Ö –∏–º–µ–Ω –∏–∑ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å nazovite.ru, –í–∏–∫–∏–ø–µ–¥–∏–∏ –∏ –¥—Ä—É–≥–∏—Ö –Ω–∞–¥–µ–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
"""

import requests
from bs4 import BeautifulSoup
import json
import re
import time
from typing import List, Set, Dict
from urllib.parse import urljoin, urlparse

class EnhancedNamesParser:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        })
        
    def parse_nazovite_ru(self) -> Dict[str, List[str]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∏–º–µ–Ω —Å nazovite.ru - –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫"""
        print("üîç –ü–∞—Ä—Å–∏–Ω–≥ –∏–º–µ–Ω —Å nazovite.ru...")
        
        male_names = set()
        female_names = set()
        
        # –°—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∏–º–µ–Ω–∞–º–∏ –Ω–∞ nazovite.ru
        pages = [
            "https://www.nazovite.ru/russkie/",
            "https://www.nazovite.ru/russkie/muzhskie/",
            "https://www.nazovite.ru/russkie/zhenskie/",
            "https://www.nazovite.ru/popular/",
            "https://www.nazovite.ru/rare/"
        ]
        
        for page in pages:
            try:
                print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {page}")
                response = self.session.get(page, timeout=15)
                response.raise_for_status()
                
                soup = BeautifulSoup(response.content, 'html.parser')
                
                # –ò—â–µ–º –∏–º–µ–Ω–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
                name_elements = soup.find_all(['a', 'span', 'div'], string=re.compile(r'^[–ê-–Ø–∞-—è–Å—ë]+$'))
                
                for element in name_elements:
                    name = element.get_text().strip()
                    
                    if self.is_valid_name(name):
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
                        context = str(element.parent) if element.parent else ""
                        
                        if self.is_male_context(context, name):
                            male_names.add(name)
                        elif self.is_female_context(context, name):
                            female_names.add(name)
                        else:
                            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±–∞ —Å–ø–∏—Å–∫–∞
                            male_names.add(name)
                            female_names.add(name)
                
                time.sleep(2)  # –í–µ–∂–ª–∏–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {page}: {e}")
                continue
        
        return {
            'male': list(male_names),
            'female': list(female_names)
        }
    
    def parse_wikipedia_enhanced(self) -> Dict[str, List[str]]:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –í–∏–∫–∏–ø–µ–¥–∏–∏"""
        print("üîç –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –í–∏–∫–∏–ø–µ–¥–∏–∏...")
        
        male_names = set()
        female_names = set()
        
        # –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏
        pages = [
            "https://ru.wikipedia.org/wiki/–ö–∞—Ç–µ–≥–æ—Ä–∏—è:–†—É—Å—Å–∫–∏–µ_–º—É–∂—Å–∫–∏–µ_–∏–º–µ–Ω–∞",
            "https://ru.wikipedia.org/wiki/–ö–∞—Ç–µ–≥–æ—Ä–∏—è:–†—É—Å—Å–∫–∏–µ_–∂–µ–Ω—Å–∫–∏–µ_–∏–º–µ–Ω–∞",
            "https://ru.wikipedia.org/wiki/–°–ø–∏—Å–æ–∫_—Ä—É—Å—Å–∫–∏—Ö_–º—É–∂—Å–∫–∏—Ö_–∏–º—ë–Ω",
            "https://ru.wikipedia.org/wiki/–°–ø–∏—Å–æ–∫_—Ä—É—Å—Å–∫–∏—Ö_–∂–µ–Ω—Å–∫–∏—Ö_–∏–º—ë–Ω"
        ]
        
        for page in pages:
            try:
                print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {page}")
                response = self.session.get(page, timeout=15)
                response.raise_for_status()
                
                soup = BeautifulSoup(response.content, 'html.parser')
                
                # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–º–µ–Ω–∞
                links = soup.find_all('a', href=re.compile(r'/wiki/[–ê-–Ø–∞-—è–Å—ë]'))
                
                for link in links:
                    name = link.get_text().strip()
                    
                    if self.is_valid_name(name):
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª –ø–æ URL –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
                        if '–º—É–∂—Å–∫' in page.lower():
                            male_names.add(name)
                        elif '–∂–µ–Ω—Å–∫' in page.lower():
                            female_names.add(name)
                        else:
                            # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è–º
                            if self.is_male_name_by_ending(name):
                                male_names.add(name)
                            elif self.is_female_name_by_ending(name):
                                female_names.add(name)
                
                time.sleep(2)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {page}: {e}")
                continue
        
        return {
            'male': list(male_names),
            'female': list(female_names)
        }
    
    def parse_names_api(self) -> Dict[str, List[str]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å API —Å–µ—Ä–≤–∏—Å–æ–≤ –∏–º–µ–Ω"""
        print("üîç –ü–∞—Ä—Å–∏–Ω–≥ —Å API —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        male_names = set()
        female_names = set()
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ API
        api_endpoints = [
            "https://api.namesapi.com/v1/names",
            "https://randomuser.me/api/?results=1000&nat=ru"
        ]
        
        for endpoint in api_endpoints:
            try:
                print(f"üìÑ –ü—Ä–æ–±—É—é API: {endpoint}")
                response = self.session.get(endpoint, timeout=10)
                
                if response.status_code == 200:
                    data = response.json()
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API
                    names = self.extract_names_from_api_data(data)
                    male_names.update(names.get('male', []))
                    female_names.update(names.get('female', []))
                
                time.sleep(1)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ API {endpoint}: {e}")
                continue
        
        return {
            'male': list(male_names),
            'female': list(female_names)
        }
    
    def parse_common_names_datasets(self) -> Dict[str, List[str]]:
        """–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–º–µ–Ω–∞ –∏–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤"""
        print("üîç –î–æ–±–∞–≤–ª—è—é –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–º–µ–Ω–∞ –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤...")
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä—É—Å—Å–∫–∏—Ö –∏–º–µ–Ω
        popular_male_names = [
            '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', '–ê–ª–µ–∫—Å–µ–π', '–ê–Ω–¥—Ä–µ–π', '–ê–Ω—Ç–æ–Ω', '–ê—Ä—Ç—ë–º', '–ë–æ—Ä–∏—Å', '–í–∞–¥–∏–º', '–í–∞–ª–µ–Ω—Ç–∏–Ω', '–í–∞–ª–µ—Ä–∏–π', '–í–∞—Å–∏–ª–∏–π',
            '–í–∏–∫—Ç–æ—Ä', '–í–∏—Ç–∞–ª–∏–π', '–í–ª–∞–¥–∏–º–∏—Ä', '–í–ª–∞–¥–∏—Å–ª–∞–≤', '–í—è—á–µ—Å–ª–∞–≤', '–ì–µ–Ω–Ω–∞–¥–∏–π', '–ì–µ–æ—Ä–≥–∏–π', '–ì—Ä–∏–≥–æ—Ä–∏–π', '–î–µ–Ω–∏—Å', '–î–º–∏—Ç—Ä–∏–π',
            '–ï–≤–≥–µ–Ω–∏–π', '–ï–≥–æ—Ä', '–ò–≤–∞–Ω', '–ò–≥–æ—Ä—å', '–ò–ª—å—è', '–ö–∏—Ä–∏–ª–ª', '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω', '–õ–µ–æ–Ω–∏–¥', '–ú–∞–∫—Å–∏–º', '–ú–∏—Ö–∞–∏–ª',
            '–ù–∏–∫–æ–ª–∞–π', '–û–ª–µ–≥', '–ü–∞–≤–µ–ª', '–ü—ë—Ç—Ä', '–†–æ–º–∞–Ω', '–°–µ—Ä–≥–µ–π', '–°—Ç–∞–Ω–∏—Å–ª–∞–≤', '–°—Ç–µ–ø–∞–Ω', '–§—ë–¥–æ—Ä', '–Æ—Ä–∏–π',
            '–ê–Ω–∞—Ç–æ–ª–∏–π', '–ê—Ä—Ç—É—Ä', '–ë–æ–≥–¥–∞–Ω', '–ì–ª–µ–±', '–î–∞–Ω–∏–∏–ª', '–ó–∞—Ö–∞—Ä', '–õ–µ–≤', '–ú–∞—Ä–∫', '–ù–∏–∫–∏—Ç–∞', '–†—É—Å–ª–∞–Ω',
            '–°–µ–º—ë–Ω', '–¢–∏–º—É—Ä', '–§–∏–ª–∏–ø–ø', '–≠–¥—É–∞—Ä–¥', '–Ø—Ä–æ—Å–ª–∞–≤', '–ê—Ä—Å–µ–Ω–∏–π', '–ë–æ—Ä–∏—Å–ª–∞–≤', '–í–ª–∞–¥–∏–º–∏—Ä', '–í—Å–µ–≤–æ–ª–æ–¥', '–ì–∞–≤—Ä–∏–∏–ª',
            '–î–∞–≤–∏–¥', '–ï–ª–∏—Å–µ–π', '–ó–∞—Ö–∞—Ä', '–ò–≥–Ω–∞—Ç', '–ö–ª–∏–º', '–õ—É–∫–∞', '–ú–∞—Ç–≤–µ–π', '–ù–∞–∑–∞—Ä', '–û—Å—Ç–∞–ø', '–ü–ª–∞—Ç–æ–Ω',
            '–†–æ—Å—Ç–∏—Å–ª–∞–≤', '–°–∞–≤–≤–∞', '–¢–∞—Ä–∞—Å', '–£—Å—Ç–∏–Ω', '–§–æ–º–∞', '–•–∞—Ä–∏—Ç–æ–Ω', '–¶–µ–∑–∞—Ä—å', '–ß–µ—Å–ª–∞–≤', '–®–∞–º–∏–ª—å', '–≠–º–º–∞–Ω—É–∏–ª',
            '–Æ–ª–∏–∞–Ω', '–Ø–∫–æ–≤', '–ê–±—Ä–∞–º', '–ê–¥–∞–º', '–ê–¥—Ä–∏–∞–Ω', '–ê–∫–∏–º', '–ê–ª—å–±–µ—Ä—Ç', '–ê–ª—å—Ñ—Ä–µ–¥', '–ê–Ω–∞—Ç–æ–ª–∏–π', '–ê–Ω–¥—Ä–∏–∞–Ω',
            '–ê–Ω—Ç–æ–Ω', '–ê–ø–æ–ª–ª–æ–Ω', '–ê—Ä–∫–∞–¥–∏–π', '–ê—Ä–Ω–æ–ª—å–¥', '–ê—Ä—Ç—É—Ä', '–ê—Ñ–∞–Ω–∞—Å–∏–π', '–ë–µ–Ω–µ–¥–∏–∫—Ç', '–ë–æ–ª–µ—Å–ª–∞–≤', '–í–∞–ª–µ–Ω—Ç–∏–Ω', '–í–∞–ª–µ—Ä–∏–∞–Ω',
            '–í–∞—Ä—Ñ–æ–ª–æ–º–µ–π', '–í–µ–Ω–∏–∞–º–∏–Ω', '–í–∏–∫–µ–Ω—Ç–∏–π', '–í–∏—Ç–∞–ª–∏–π', '–í–ª–∞–¥–∏–ª–µ–Ω', '–í–ª–∞–¥–ª–µ–Ω', '–í–æ–ª—å–¥–µ–º–∞—Ä', '–í—è—á–µ—Å–ª–∞–≤', '–ì–∞–≤—Ä–∏–∏–ª', '–ì–µ–Ω–Ω–∞–¥–∏–π',
            '–ì–µ–æ—Ä–≥–∏–π', '–ì–µ—Ä–º–∞–Ω', '–ì–ª–µ–±', '–ì–æ—Ä–¥–µ–π', '–ì—Ä–∏–≥–æ—Ä–∏–π', '–î–∞–≤–∏–¥', '–î–∞–Ω–∏–∏–ª', '–î–µ–º–µ–Ω—Ç–∏–π', '–î–µ–º–∏–¥', '–î–µ–º—å—è–Ω',
            '–î–µ–Ω–∏—Å', '–î–º–∏—Ç—Ä–∏–π', '–î–æ–±—Ä—ã–Ω—è', '–î–æ–Ω–∞—Ç', '–î–æ—Ä–æ—Ñ–µ–π', '–ï–≤–≥–µ–Ω–∏–π', '–ï–≤–≥—Ä–∞—Ñ', '–ï–≤–¥–æ–∫–∏–º', '–ï–≤–ª–∞–º–ø–∏–π', '–ï–≤—Å–µ–π',
            '–ï–≤—Å—Ç–∞—Ñ–∏–π', '–ï–≤—Å—Ç–∏–≥–Ω–µ–π', '–ï–≥–æ—Ä', '–ï–ª–∏–∑–∞—Ä', '–ï–ª–∏—Å–µ–π', '–ï–º–µ–ª—å—è–Ω', '–ï–ø–∏—Ñ–∞–Ω', '–ï—Ä–º–æ–ª–∞–π', '–ï—Ä–æ—Ñ–µ–π', '–ï—Ñ–∏–º',
            '–ï—Ñ—Ä–µ–º', '–ñ–¥–∞–Ω', '–ó–∞—Ö–∞—Ä', '–ó–∏–Ω–æ–≤–∏–π', '–ó–æ—Å–∏–º–∞', '–ò–≤–∞–Ω', '–ò–≥–Ω–∞—Ç', '–ò–≥–æ—Ä—å', '–ò–∑–º–∞–∏–ª', '–ò–ª—å—è',
            '–ò–Ω–Ω–æ–∫–µ–Ω—Ç–∏–π', '–ò–æ—Å–∏—Ñ', '–ò–ø–ø–æ–ª–∏—Ç', '–ò—Ä–∞–∫–ª–∏–π', '–ò—Å–∞–∞–∫', '–ò—Å–∏–¥–æ—Ä', '–ò—É–¥–∞', '–ö–∞–∑–∏–º–∏—Ä', '–ö–∞–ª–ª–∏—Å—Ç—Ä–∞—Ç', '–ö–∞–ø–∏—Ç–æ–Ω',
            '–ö–∞—Ä–ª', '–ö–∞—Å—å—è–Ω', '–ö–∏–º', '–ö–∏—Ä', '–ö–∏—Ä–∏–ª–ª', '–ö–ª–∞–≤–¥–∏–π', '–ö–ª–∏–º–µ–Ω—Ç', '–ö–æ–Ω–¥—Ä–∞—Ç', '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω', '–ö–æ—Ä–Ω–µ–π',
            '–ö–æ—Ä–Ω–∏–ª–∏–π', '–ö—É–∑—å–º–∞', '–õ–∞–≤—Ä–µ–Ω—Ç–∏–π', '–õ–∞–∑–∞—Ä—å', '–õ–µ–≤', '–õ–µ–æ–Ω–∏–¥', '–õ–µ–æ–Ω—Ç–∏–π', '–õ—É–∫—å—è–Ω', '–ú–∞–∫–∞—Ä', '–ú–∞–∫—Å–∏–º',
            '–ú–∞–∫—Å–∏–º–∏–ª–∏–∞–Ω', '–ú–∞—Ä–∫', '–ú–∞—Ä—Ç–∏–Ω', '–ú–∞—Ç–≤–µ–π', '–ú–µ—Ñ–æ–¥–∏–π', '–ú–∏—Ä–æ–Ω', '–ú–∏—Ä–æ—Å–ª–∞–≤', '–ú–∏—Ö–∞–∏–ª', '–ú–æ–¥–µ—Å—Ç', '–ú–æ–∏—Å–µ–π',
            '–ù–∞–∑–∞—Ä', '–ù–∞—Ç–∞–Ω', '–ù–µ—Å—Ç–æ—Ä', '–ù–∏–∫–∞–Ω–¥—Ä', '–ù–∏–∫–∞–Ω–æ—Ä', '–ù–∏–∫–∏—Ç–∞', '–ù–∏–∫–∏—Ñ–æ—Ä', '–ù–∏–∫–æ–¥–∏–º', '–ù–∏–∫–æ–ª–∞–π', '–ù–∏–∫–æ–Ω',
            '–ù–∏–ª', '–û–ª–µ–≥', '–û–Ω–∏—Å–∏–º', '–û—Ä–µ—Å—Ç', '–û—Å–∏–ø', '–ü–∞–≤–µ–ª', '–ü–∞–Ω–∫—Ä–∞—Ç', '–ü–∞–Ω—Ç–µ–ª–µ–π–º–æ–Ω', '–ü–∞—Ä–∞–º–æ–Ω', '–ü–∞—Ä—Ñ–µ–Ω',
            '–ü–∞—Ö–æ–º', '–ü–µ—Ç—Ä', '–ü–∏–º–µ–Ω', '–ü–ª–∞—Ç–æ–Ω', '–ü–æ–ª–∏–∫–∞—Ä–ø', '–ü–æ—Ä—Ñ–∏—Ä–∏–π', '–ü–æ—Ç–∞–ø', '–ü—Ä–æ–≤', '–ü—Ä–æ–∫–ª', '–ü—Ä–æ–∫–æ—Ñ–∏–π',
            '–ü—Ä–æ—Ö–æ—Ä', '–†–∞–¥–∏–º', '–†–∞–¥–∏—Å–ª–∞–≤', '–†–∞—Ç–∏–±–æ—Ä', '–†–∞—Ç–º–∏—Ä', '–†–æ–¥–∏–æ–Ω', '–†–æ–º–∞–Ω', '–†–æ—Å—Ç–∏—Å–ª–∞–≤', '–†—É–±–µ–Ω', '–†—É—Å–ª–∞–Ω',
            '–†—é—Ä–∏–∫', '–°–∞–≤–≤–∞', '–°–∞–≤–µ–ª–∏–π', '–°–∞–º—Å–æ–Ω', '–°–∞–º—É–∏–ª', '–°–≤–µ—Ç–æ–∑–∞—Ä', '–°–≤—è—Ç–æ—Å–ª–∞–≤', '–°–µ–≤–∞—Å—Ç—å—è–Ω', '–°–µ–º–µ–Ω', '–°–µ—Ä–∞—Ñ–∏–º',
            '–°–µ—Ä–≥–µ–π', '–°–∏–ª—å–≤–µ—Å—Ç—Ä', '–°–∏–º–æ–Ω', '–°–æ–ª–æ–º–æ–Ω', '–°–ø–∞—Ä—Ç–∞–∫', '–°—Ç–∞–Ω–∏—Å–ª–∞–≤', '–°—Ç–µ–ø–∞–Ω', '–°—Ç—Ä–∞—Ç–æ–Ω', '–¢–∞—Ä–∞—Å', '–¢–µ—Ä–µ–Ω—Ç–∏–π',
            '–¢–∏–º–æ—Ñ–µ–π', '–¢–∏–º—É—Ä', '–¢–∏—Ç', '–¢–∏—Ö–æ–Ω', '–¢—Ä–∏—Ñ–æ–Ω', '–¢—Ä–æ—Ñ–∏–º', '–£–ª—å—è–Ω', '–£—Å—Ç–∏–Ω', '–§–∞–¥–µ–π', '–§–µ–¥–æ—Ä',
            '–§–µ–¥–æ—Ç', '–§–µ–ª–∏–∫—Å', '–§–µ–æ–∫—Ç–∏—Å—Ç', '–§–µ–æ—Ñ–∞–Ω', '–§–µ—Ä–∞–ø–æ–Ω—Ç', '–§–∏–ª–∞—Ä–µ—Ç', '–§–∏–ª–∞—Ç', '–§–∏–ª–∏–º–æ–Ω', '–§–∏–ª–∏–ø–ø', '–§–∏—Ä—Å',
            '–§–ª–æ—Ä', '–§–æ–∫–∞', '–§–æ–º–∞', '–§–æ—Ä—Ç—É–Ω–∞—Ç', '–§—Ä–æ–ª', '–•–∞—Ä–∏—Ç–æ–Ω', '–•—Ä–∏—Å—Ç–æ—Ñ–æ—Ä', '–ß–µ—Å–ª–∞–≤', '–≠–¥–≥–∞—Ä', '–≠–¥–º—É–Ω–¥',
            '–≠–¥—É–∞—Ä–¥', '–≠–ª—å–¥–∞—Ä', '–≠–º–∏–ª—å', '–≠–º–º–∞–Ω—É–∏–ª', '–≠—Ä–∞—Å—Ç', '–≠—Ä–∏–∫', '–≠—Ä–Ω–µ—Å—Ç', '–Æ–≤–µ–Ω–∞–ª–∏–π', '–Æ–ª–∏–∞–Ω', '–Æ–ª–∏–π',
            '–Æ—Ä–∏–π', '–Ø–∫–æ–≤', '–Ø–Ω', '–Ø–Ω—É–∞—Ä–∏–π', '–Ø—Ä–æ—Å–ª–∞–≤'
        ]
        
        popular_female_names = [
            '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞', '–ê–ª–∏–Ω–∞', '–ê–Ω–∞—Å—Ç–∞—Å–∏—è', '–ê–Ω–Ω–∞', '–í–∞–ª–µ–Ω—Ç–∏–Ω–∞', '–í–∞–ª–µ—Ä–∏—è', '–í–µ—Ä–∞', '–í–∏–∫—Ç–æ—Ä–∏—è', '–ì–∞–ª–∏–Ω–∞', '–î–∞—Ä—å—è',
            '–ï–≤–≥–µ–Ω–∏—è', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞', '–ï–ª–µ–Ω–∞', '–ñ–∞–Ω–Ω–∞', '–ó–æ—è', '–ò—Ä–∏–Ω–∞', '–ö—Ä–∏—Å—Ç–∏–Ω–∞', '–õ–∞—Ä–∏—Å–∞', '–õ—é–±–æ–≤—å', '–õ—é–¥–º–∏–ª–∞',
            '–ú–∞—Ä–∏–Ω–∞', '–ú–∞—Ä–∏—è', '–ù–∞–¥–µ–∂–¥–∞', '–ù–∞—Ç–∞–ª—å—è', '–û–∫—Å–∞–Ω–∞', '–û–ª—å–≥–∞', '–ü–æ–ª–∏–Ω–∞', '–†–∞–∏—Å–∞', '–°–≤–µ—Ç–ª–∞–Ω–∞', '–¢–∞—Ç—å—è–Ω–∞',
            '–Æ–ª–∏—è', '–Ø–Ω–∞', '–ê–ª—ë–Ω–∞', '–ê–Ω–≥–µ–ª–∏–Ω–∞', '–í–∞—Å–∏–ª–∏—Å–∞', '–í–µ—Ä–æ–Ω–∏–∫–∞', '–î–∏–∞–Ω–∞', '–ï–ª–∏–∑–∞–≤–µ—Ç–∞', '–ó–ª–∞—Ç–∞', '–ò–Ω–Ω–∞',
            '–ö–∞—Ä–∏–Ω–∞', '–õ–∞–¥–∞', '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', '–û–ª–µ—Å—è', '–†–∏–º–º–∞', '–°–æ—Ñ–∏—è', '–¢–∞–º–∞—Ä–∞', '–£–ª—å—è–Ω–∞', '–§–∞–∏–Ω–∞', '–•—Ä–∏—Å—Ç–∏–Ω–∞',
            '–¶–≤–µ—Ç–∞–Ω–∞', '–ß—É–ª–ø–∞–Ω', '–®–∞—Ä–∏—Ñ–∞', '–≠–ª—å–≤–∏—Ä–∞', '–Æ–ª–∏–∞–Ω–∞', '–Ø—Ä–æ—Å–ª–∞–≤–∞', '–ê–≥–∞—Ç–∞', '–ê–≥–Ω–∏—è', '–ê–¥–∞', '–ê–¥–µ–ª–∞–∏–¥–∞',
            '–ê–∑–∞', '–ê–∏–¥–∞', '–ê–∫–∏–ª–∏–Ω–∞', '–ê–∫—Å–∏–Ω—å—è', '–ê–ª–µ–≤—Ç–∏–Ω–∞', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞', '–ê–ª—ë–Ω–∞', '–ê–ª–∏–Ω–∞', '–ê–ª–∏—Å–∞', '–ê–ª–ª–∞',
            '–ê–ª—å–±–∏–Ω–∞', '–ê–Ω–∞—Å—Ç–∞—Å–∏—è', '–ê–Ω–≥–µ–ª–∏–Ω–∞', '–ê–Ω–∂–µ–ª–∞', '–ê–Ω–∂–µ–ª–∏–∫–∞', '–ê–Ω–Ω–∞', '–ê–Ω—Ç–æ–Ω–∏–Ω–∞', '–ê–Ω—Ñ–∏—Å–∞', '–ê–ø–æ–ª–ª–∏–Ω–∞—Ä–∏—è', '–ê—Ä–∏–∞–¥–Ω–∞',
            '–ê—Ä–∏–Ω–∞', '–ê—Ä—Å–µ–Ω–∏—è', '–ê—Å—Ç—Ä–∞', '–ê—Ñ–∞–Ω–∞—Å–∏—è', '–ë–µ–∞—Ç–∞', '–ë–µ–ª–ª–∞', '–ë–µ—Ä—Ç–∞', '–ë–æ–≥–¥–∞–Ω–∞', '–ë–æ–∂–µ–Ω–∞', '–í–∞–ª–µ–Ω—Ç–∏–Ω–∞',
            '–í–∞–ª–µ—Ä–∏—è', '–í–∞–Ω–¥–∞', '–í–∞—Ä–≤–∞—Ä–∞', '–í–∞—Å–∏–ª–∏—Å–∞', '–í–∞—Å—Å–∞', '–í–µ–Ω–µ—Ä–∞', '–í–µ—Ä–∞', '–í–µ—Ä–æ–Ω–∏–∫–∞', '–í–µ—Å–µ–ª–∏–Ω–∞', '–í–µ—Å—Ç–∞',
            '–í–µ—Ç–∞', '–í–∏–¥–∞–Ω–∞', '–í–∏–∫—Ç–æ—Ä–∏—è', '–í–∏–ª–µ–Ω–∞', '–í–∏–ª–æ—Ä–∞', '–í–∏–æ–ª–∞', '–í–∏–æ–ª–µ—Ç—Ç–∞', '–í–∏—Ä–≥–∏–Ω–∏—è', '–í–∏—Ä–∏–Ω–µ—è', '–í–∏—Ç–∞',
            '–í–∏—Ç–∞–ª–∏–Ω–∞', '–í–ª–∞–¥–∞', '–í–ª–∞–¥–∏–ª–µ–Ω–∞', '–í–ª–∞–¥–∏–º–∏—Ä–∞', '–í–ª–∞–¥–∏—Å–ª–∞–≤–∞', '–í–ª–∞–¥–ª–µ–Ω–∞', '–í–ª–∞—Å—Ç–∞', '–í–æ–ª—è', '–í—Å–µ—Å–ª–∞–≤–∞', '–ì–∞–ª–∏–Ω–∞',
            '–ì–∞–ª—è', '–ì–∞–Ω–Ω–∞', '–ì–∞—è–Ω–∞', '–ì–µ–ª–µ–Ω–∞', '–ì–µ–ª–ª–∞', '–ì–µ–Ω—Ä–∏–µ—Ç—Ç–∞', '–ì–µ–æ—Ä–≥–∏–Ω–∞', '–ì–µ—Ä–∞', '–ì–µ—Ä—Ç—Ä—É–¥–∞', '–ì–ª–∞—Ñ–∏—Ä–∞',
            '–ì–ª–∏–∫–µ—Ä–∏—è', '–ì–ª–æ—Ä–∏—è', '–ì–æ–ª—É–±–∞', '–ì–æ—Ä–∏—Å–ª–∞–≤–∞', '–ì—Ä–∞–∂–∏–Ω–∞', '–ì—Ä–µ—Ç–∞', '–ì—É–ª—è', '–î–∞–Ω–∞', '–î–∞–Ω–∏—ç–ª–∞', '–î–∞—Ä–∞',
            '–î–∞—Ä–∏–Ω–∞', '–î–∞—Ä—å—è', '–î–µ–∫–∞–±—Ä–∏–Ω–∞', '–î–∂–∞–º–∏–ª—è', '–î–∏–∞–Ω–∞', '–î–∏–Ω–∞', '–î–∏–Ω–∞—Ä–∞', '–î–æ–±—Ä–æ–º–∏–ª–∞', '–î–æ–±—Ä–æ—Å–ª–∞–≤–∞', '–î–æ–º–∏–Ω–∏–∫–∞',
            '–î–æ–º–Ω–∞', '–î–æ–Ω–∞—Ä–∞', '–î–æ—Ä–∞', '–î–æ—Ä–æ—Ç–µ—è', '–ï–≤–∞', '–ï–≤–∞–Ω–≥–µ–ª–∏–Ω–∞', '–ï–≤–≥–µ–Ω–∏—è', '–ï–≤–¥–æ–∫–∏—è', '–ï–≤–ª–∞–º–ø–∏—è', '–ï–≤—Å—Ç–æ–ª–∏—è',
            '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞', '–ï–ª–µ–Ω–∞', '–ï–ª–∏–∑–∞–≤–µ—Ç–∞', '–ï–ª–∏–∫–æ–Ω–∏–¥–∞', '–ï–ø–∏—Å—Ç–∏–º–∞', '–ï—Ä–º–∏–æ–Ω–∏—è', '–ñ–∞–Ω–Ω–∞', '–ñ–∞—Å–º–∏–Ω', '–ñ–¥–∞–Ω–∞', '–ñ–æ–∑–µ—Ñ–∏–Ω–∞',
            '–ó–∞–±–∞–≤–∞', '–ó–∞–∏—Ä–∞', '–ó–∞–º–∏—Ä–∞', '–ó–∞—Ä–∞', '–ó–∞—Ä–µ–º–∞', '–ó–∞—Ä–∏–Ω–∞', '–ó–µ–º—Ñ–∏—Ä–∞', '–ó–∏–Ω–∞–∏–¥–∞', '–ó–∏—Ç–∞', '–ó–ª–∞—Ç–∞',
            '–ó–ª–∞—Ç–æ—Å–ª–∞–≤–∞', '–ó–æ—è', '–ó—É–ª—å—Ñ–∏—è', '–ó—É—Ö—Ä–∞', '–ò–≤–∞–Ω–Ω–∞', '–ò–¥–∞', '–ò–¥–µ—è', '–ò–∑–∞–±–µ–ª–ª–∞', '–ò–∑–æ–ª—å–¥–∞', '–ò–ª–∞—Ä–∏—è',
            '–ò–ª–æ–Ω–∞', '–ò–Ω–≥–∞', '–ò–Ω–¥–∏—Ä–∞', '–ò–Ω–µ—Å—Å–∞', '–ò–Ω–Ω–∞', '–ò–æ–∞–Ω–Ω–∞', '–ò–æ–ª–∞–Ω—Ç–∞', '–ò—Ä–∞–∏–¥–∞', '–ò—Ä–∏–Ω–∞', '–ò—Ä–º–∞',
            '–ò—Å–∏–¥–æ—Ä–∞', '–ò—è', '–ö–∞–ª–µ—Ä–∏—è', '–ö–∞–º–∏–ª–ª–∞', '–ö–∞–ø–∏—Ç–æ–ª–∏–Ω–∞', '–ö–∞—Ä–∏–Ω–∞', '–ö–∞—Ä–æ–ª–∏–Ω–∞', '–ö–∞—Ç–∞—Ä–∏–Ω–∞', '–ö–∏—Ä–∞', '–ö–∏—Ä–∏–ª–ª–∞',
            '–ö–ª–∞–≤–¥–∏—è', '–ö–ª–∞—Ä–∞', '–ö–ª–∞—Ä–∏—Å—Å–∞', '–ö–ª–µ–º–µ–Ω—Ç–∏–Ω–∞', '–ö–ª–µ–æ–ø–∞—Ç—Ä–∞', '–ö–æ–Ω–∫–æ—Ä–¥–∏—è', '–ö–æ–Ω—Å—Ç–∞–Ω—Ü–∏—è', '–ö–æ—Ä–∞', '–ö–æ—Ä–Ω–µ–ª–∏—è', '–ö—Ä–∏—Å—Ç–∏–Ω–∞',
            '–ö—Å–µ–Ω–∏—è', '–õ–∞–¥–∞', '–õ–∞—Ä–∏—Å–∞', '–õ–∞—É—Ä–∞', '–õ–µ–π–ª–∞', '–õ–µ–Ω–∏–Ω–∞', '–õ–µ–æ–∫–∞–¥–∏—è', '–õ–µ–æ–Ω–∏–¥–∞', '–õ–µ–æ–Ω—Ç–∏–Ω–∞', '–õ–µ—Å—è',
            '–õ–∏–≤–∏—è', '–õ–∏–¥–∏—è', '–õ–∏–ª–∏—è', '–õ–∏–ª–∏—è', '–õ–∏–Ω–∞', '–õ–∏–Ω–¥–∞', '–õ–∏—è', '–õ–æ–ª–∞', '–õ–æ–ª–∏—Ç–∞', '–õ—É–∏–∑–∞',
            '–õ—É–∫–µ—Ä—å—è', '–õ—É–∫–∏—è', '–õ—é–±–∞–≤–∞', '–õ—é–±–æ–≤—å', '–õ—é–¥–º–∏–ª–∞', '–õ—é—Ü–∏—è', '–ú–∞–≥–¥–∞–ª–∏–Ω–∞', '–ú–∞–π—è', '–ú–∞–∫—Å–∏–º–∏–ª–∏–∞–Ω–∞', '–ú–∞–ª—å–≤–∏–Ω–∞',
            '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', '–ú–∞—Ä–∏–∞–Ω–Ω–∞', '–ú–∞—Ä–∏–Ω–∞', '–ú–∞—Ä–∏—è', '–ú–∞—Ä—Ç–∞', '–ú–∞—Ä—Ñ–∞', '–ú–∞—Ä—å—è–º', '–ú–∞—Ç–∏–ª—å–¥–∞', '–ú–µ–ª–∞–Ω–∏—è', '–ú–µ–ª–∏—Å—Å–∞',
            '–ú–∏–ª–∞–Ω–∞', '–ú–∏–ª–µ–Ω–∞', '–ú–∏–ª–∏—Ü–∞', '–ú–∏–ª–æ–ª–∏–∫–∞', '–ú–∏–ª–æ—Å–ª–∞–≤–∞', '–ú–∏—Ä–∞', '–ú–∏—Ä—Ä–∞', '–ú–∏—Ä–æ—Å–ª–∞–≤–∞', '–ú–∏—Ç—Ä–æ–¥–æ—Ä–∞', '–ú–ª–∞–¥–∞',
            '–ú—Å—Ç–∏—Å–ª–∞–≤–∞', '–ú—É–∑–∞', '–ù–∞–¥–µ–∂–¥–∞', '–ù–∞–Ω–∞', '–ù–∞—Ç–∞–ª—å—è', '–ù–µ–ª–ª–∏', '–ù–µ–æ–Ω–∏–ª–∞', '–ù–∏–∫–∞', '–ù–∏–∫–æ–ª—å', '–ù–∏–Ω–∞',
            '–ù–æ–Ω–Ω–∞', '–ù–æ—Ä–∞', '–ù–æ—Ä–º–∞', '–û–∫—Å–∞–Ω–∞', '–û–∫—Ç—è–±—Ä–∏–Ω–∞', '–û–ª–µ—Å—è', '–û–ª–∏–≤–∏—è', '–û–ª—å–≥–∞', '–û—Ñ–µ–ª–∏—è', '–ü–∞–≤–ª–∏–Ω–∞',
            '–ü–µ–ª–∞–≥–µ—è', '–ü–ª–∞—Ç–æ–Ω–∏–¥–∞', '–ü–æ–ª–∏–Ω–∞', '–ü—Ä–∞—Å–∫–æ–≤—å—è', '–ü—É–ª—å—Ö–µ—Ä–∏—è', '–†–∞–¥–∞', '–†–∞–¥–º–∏–ª–∞', '–†–∞–∏—Å–∞', '–†–∞—Ö–∏–ª—å', '–†–µ–≤–µ–∫–∫–∞',
            '–†–µ–≥–∏–Ω–∞', '–†–µ–Ω–∞—Ç–∞', '–†–∏–º–º–∞', '–†–∏—Ç–∞', '–†–æ–≥–Ω–µ–¥–∞', '–†–æ–∑–∞', '–†–æ–∑–∞–ª–∏—è', '–†–æ–∫—Å–∞–Ω–∞', '–†–æ—Å—Ç–∏—Å–ª–∞–≤–∞', '–†—É—Ñ–∏–Ω–∞',
            '–†—É—Å–ª–∞–Ω–∞', '–†—É—Ñ–∏–Ω–∞', '–°–∞–±–∏–Ω–∞', '–°–∞–ª–æ–º–µ—è', '–°–∞—Ä–∞', '–°–≤–µ—Ç–ª–∞–Ω–∞', '–°–≤—è—Ç–æ—Å–ª–∞–≤–∞', '–°–µ–≤–µ—Ä–∏–Ω–∞', '–°–µ—Ä–∞—Ñ–∏–º–∞', '–°–∏–ª—å–≤–∞',
            '–°–∏–ª—å–≤–∏—è', '–°–∏–º–æ–Ω–∞', '–°–Ω–µ–∂–∞–Ω–∞', '–°–æ–ª–æ–º–æ–Ω–∏—è', '–°–æ—Ñ—å—è', '–°—Ç–∞–Ω–∏—Å–ª–∞–≤–∞', '–°—Ç–µ–ª–ª–∞', '–°—Ç–µ–ø–∞–Ω–∏–¥–∞', '–°—É—Å–∞–Ω–Ω–∞', '–¢–∞–∏—Å–∏—è',
            '–¢–∞–º–∞—Ä–∞', '–¢–∞—Ç—å—è–Ω–∞', '–¢–µ–æ–Ω–∞', '–¢–µ—Ä–µ–∑–∞', '–¢–∏–Ω–∞', '–¢–æ–º–∏–ª–∞', '–£–ª—å—è–Ω–∞', '–£—Ä—Å—É–ª–∞', '–§–∞–∏–Ω–∞', '–§–∞—è',
            '–§–µ–¥–æ—Ä–∞', '–§–µ–∫–ª–∞', '–§–µ–ª–∏—Ü–∏—è', '–§–µ–æ–¥–æ—Ä–∞', '–§–µ–æ–¥–æ—Å–∏—è', '–§–∏–æ–Ω–∞', '–§–ª–æ—Ä–∞', '–§–ª–æ—Ä–µ–Ω—Ç–∏–Ω–∞', '–§—Ä–∞–Ω—á–µ—Å–∫–∞', '–§—Ä–∏–¥–∞',
            '–•–∞—Ä–∏—Ç–∞', '–•–∏–ª—å–¥–∞', '–•—Ä–∏—Å—Ç–∏–Ω–∞', '–•—Ä–∏—Å—Ç—è', '–¶–≤–µ—Ç–∞–Ω–∞', '–ß–µ—Å–ª–∞–≤–∞', '–ß—É–ª–ø–∞–Ω', '–®–∞—Ä–∏—Ñ–∞', '–≠–≤–µ–ª–∏–Ω–∞', '–≠–¥–∏—Ç–∞',
            '–≠–ª–µ–æ–Ω–æ—Ä–∞', '–≠–ª–∏–∑–∞', '–≠–ª–∏–Ω–∞', '–≠–ª–ª–∞', '–≠–ª—å–≤–∏—Ä–∞', '–≠–ª—å–∑–∞', '–≠–ª—å–º–∏—Ä–∞', '–≠–º–∏–ª–∏—è', '–≠–º–º–∞', '–≠—Ä–∏–∫–∞',
            '–≠—Å–º–µ—Ä–∞–ª—å–¥–∞', '–Æ–¥–∏—Ñ—å', '–Æ–ª–∏—è', '–Æ–Ω–∞', '–Æ–Ω–∏—è', '–Æ–Ω–æ–Ω–∞', '–Æ—Å—Ç–∏–Ω–∞', '–Ø–¥–≤–∏–≥–∞', '–Ø–Ω–∞', '–Ø—Ä–æ—Å–ª–∞–≤–∞'
        ]
        
        return {
            'male': popular_male_names,
            'female': popular_female_names
        }
    
    def is_valid_name(self, name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –≤–∞–ª–∏–¥–Ω—ã–º –∏–º–µ–Ω–µ–º"""
        if not name or len(name) < 2 or len(name) > 20:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã
        if not re.match(r'^[–ê-–Ø–∞-—è–Å—ë]+$', name):
            return False
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–≤–∞
        exclude_words = [
            '–∫–∞—Ç–µ–≥–æ—Ä–∏—è', '—Å—Ç—Ä–∞–Ω–∏—Ü–∞', '–≤–∏–∫–∏', '—Å—Å—ã–ª–∫–∞', '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', '–æ–±—Å—É–∂–¥–µ–Ω–∏–µ',
            '–∏—Å—Ç–æ—Ä–∏—è', '—Å–æ–∑–¥–∞—Ç—å', '–ø–æ–∏—Å–∫', '–Ω–∞–≤–∏–≥–∞—Ü–∏—è', '–º–µ–Ω—é', '–∑–∞–≥–æ–ª–æ–≤–æ–∫', '—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ',
            '–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ', '—Å–º', '—Ç–∞–∫–∂–µ', '–≤–Ω–µ—à–Ω–∏–µ', '—Å—Å—ã–ª–∫–∏', '–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', '–ø—Ä–∏–º–µ—á–∞–Ω–∏—è'
        ]
        
        if name.lower() in exclude_words:
            return False
        
        return True
    
    def is_male_context(self, context: str, name: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º—É–∂—Å–∫–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        male_indicators = ['–º—É–∂—Å–∫', '–º–∞–ª—å—á–∏–∫', '–ø–∞–ø–∞', '—Å—ã–Ω', '–±—Ä–∞—Ç', '–º—É–∂', '–æ—Ç–µ—Ü']
        return any(indicator in context.lower() for indicator in male_indicators)
    
    def is_female_context(self, context: str, name: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∂–µ–Ω—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        female_indicators = ['–∂–µ–Ω—Å–∫', '–¥–µ–≤–æ—á–∫–∞', '–º–∞–º–∞', '–¥–æ—á—å', '—Å–µ—Å—Ç—Ä–∞', '–∂–µ–Ω–∞', '–º–∞—Ç—å']
        return any(indicator in context.lower() for indicator in female_indicators)
    
    def is_male_name_by_ending(self, name: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º—É–∂—Å–∫–æ–µ –∏–º—è –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é"""
        male_endings = ['–æ–≤', '–µ–≤', '–∏–Ω', '—Å–∫–∏–π', '—Ü–∫–∏–π', '–∏—á', '–æ–Ω', '–µ–Ω']
        return any(name.lower().endswith(ending) for ending in male_endings)
    
    def is_female_name_by_ending(self, name: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∂–µ–Ω—Å–∫–æ–µ –∏–º—è –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é"""
        female_endings = ['–∞', '—è', '–æ–≤–∞', '–µ–≤–∞', '–∏–Ω–∞', '—Å–∫–∞—è', '—Ü–∫–∞—è']
        return any(name.lower().endswith(ending) for ending in female_endings)
    
    def extract_names_from_api_data(self, data: dict) -> Dict[str, List[str]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º–µ–Ω–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö API"""
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ API
        return {'male': [], 'female': []}
    
    def clean_and_validate_names(self, names: List[str]) -> List[str]:
        """–û—á–∏—â–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω"""
        cleaned = []
        
        for name in names:
            # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            name = re.sub(r'[^\w\-]', '', name.strip())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
            if 2 <= len(name) <= 20 and re.match(r'^[–ê-–Ø–∞-—è–Å—ë]+$', name):
                # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
                name = name.capitalize()
                cleaned.append(name)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        return sorted(list(set(cleaned)))
    
    def save_to_json(self, data: dict, filename: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Ä—É—Å—Å–∫–∏—Ö –∏–º–µ–Ω...")
        
        # –ü–∞—Ä—Å–∏–º –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        nazovite_data = self.parse_nazovite_ru()
        wikipedia_data = self.parse_wikipedia_enhanced()
        api_data = self.parse_names_api()
        dataset_data = self.parse_common_names_datasets()
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        all_male_names = set()
        all_female_names = set()
        
        for source_data in [nazovite_data, wikipedia_data, api_data, dataset_data]:
            all_male_names.update(source_data['male'])
            all_female_names.update(source_data['female'])
        
        # –û—á–∏—â–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º
        cleaned_male = self.clean_and_validate_names(list(all_male_names))
        cleaned_female = self.clean_and_validate_names(list(all_female_names))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        result = {
            'maleNames': cleaned_male,
            'femaleNames': cleaned_female,
            'totalMale': len(cleaned_male),
            'totalFemale': len(cleaned_female),
            'totalNames': len(cleaned_male) + len(cleaned_female),
            'sources': [
                'nazovite.ru - –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –±–∞–∑–∞ —Ä—É—Å—Å–∫–∏—Ö –∏–º–µ–Ω',
                '–í–∏–∫–∏–ø–µ–¥–∏—è - –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä—É—Å—Å–∫–∏—Ö –∏–º–µ–Ω',
                'API —Å–µ—Ä–≤–∏—Å—ã –∏–º–µ–Ω',
                '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã –∏–º–µ–Ω'
            ],
            'lastUpdated': time.strftime('%Y-%m-%d %H:%M:%S')
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.save_to_json(result, '../src/data/enhanced_names.json')
        
        print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –º—É–∂—Å–∫–∏—Ö –∏–º–µ–Ω: {len(cleaned_male)}")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∂–µ–Ω—Å–∫–∏—Ö –∏–º–µ–Ω: {len(cleaned_female)}")
        print(f"üìä –í—Å–µ–≥–æ –∏–º–µ–Ω: {len(cleaned_male) + len(cleaned_female)}")

if __name__ == "__main__":
    parser = EnhancedNamesParser()
    parser.run()
