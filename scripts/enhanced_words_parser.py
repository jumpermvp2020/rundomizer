#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤ –∏–∑ –æ–±—ä–µ–º–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ—Ä–ø—É—Å–æ–≤ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞, —Å–ª–æ–≤–∞—Ä–µ–π –∏ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤
"""

import requests
from bs4 import BeautifulSoup
import json
import re
import time
from typing import List, Set, Dict

class EnhancedWordsParser:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        })
        
    def parse_national_corpus(self) -> List[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∏–∑ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ—Ä–ø—É—Å–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
        print("üîç –ü–∞—Ä—Å–∏–Ω–≥ –∏–∑ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ—Ä–ø—É—Å–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞...")
        
        words = set()
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ—Ä–ø—É—Å—É
        corpus_urls = [
            "http://ruscorpora.ru/search",
            "https://ruscorpora.ru/new/search-main.html"
        ]
        
        for url in corpus_urls:
            try:
                print(f"üìÑ –ü—Ä–æ–±—É—é –∫–æ—Ä–ø—É—Å: {url}")
                response = self.session.get(url, timeout=15)
                
                if response.status_code == 200:
                    soup = BeautifulSoup(response.content, 'html.parser')
                    
                    # –ò—â–µ–º —Å–ª–æ–≤–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
                    word_elements = soup.find_all(['span', 'div', 'a'], string=re.compile(r'^[–ê-–Ø–∞-—è–Å—ë]+$'))
                    
                    for element in word_elements:
                        word = element.get_text().strip()
                        if self.is_valid_word(word):
                            words.add(word)
                
                time.sleep(2)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ—Ä–ø—É—Å–∞ {url}: {e}")
                continue
        
        return list(words)
    
    def parse_wiktionary_enhanced(self) -> List[str]:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –í–∏–∫–∏—Å–ª–æ–≤–∞—Ä—è"""
        print("üîç –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –í–∏–∫–∏—Å–ª–æ–≤–∞—Ä—è...")
        
        words = set()
        
        # –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = [
            "https://ru.wiktionary.org/wiki/–ö–∞—Ç–µ–≥–æ—Ä–∏—è:–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ_—Ä—É—Å—Å–∫–æ–≥–æ_—è–∑—ã–∫–∞",
            "https://ru.wiktionary.org/wiki/–ö–∞—Ç–µ–≥–æ—Ä–∏—è:–ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ_—Ä—É—Å—Å–∫–æ–≥–æ_—è–∑—ã–∫–∞", 
            "https://ru.wiktionary.org/wiki/–ö–∞—Ç–µ–≥–æ—Ä–∏—è:–ì–ª–∞–≥–æ–ª—ã_—Ä—É—Å—Å–∫–æ–≥–æ_—è–∑—ã–∫–∞",
            "https://ru.wiktionary.org/wiki/–ö–∞—Ç–µ–≥–æ—Ä–∏—è:–ù–∞—Ä–µ—á–∏—è_—Ä—É—Å—Å–∫–æ–≥–æ_—è–∑—ã–∫–∞",
            "https://ru.wiktionary.org/wiki/–ö–∞—Ç–µ–≥–æ—Ä–∏—è:–ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è_—Ä—É—Å—Å–∫–æ–≥–æ_—è–∑—ã–∫–∞"
        ]
        
        for category in categories:
            try:
                print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {category}")
                response = self.session.get(category, timeout=15)
                response.raise_for_status()
                
                soup = BeautifulSoup(response.content, 'html.parser')
                
                # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–ª–æ–≤–∞
                links = soup.find_all('a', href=re.compile(r'/wiki/[–ê-–Ø–∞-—è–Å—ë]'))
                
                for link in links:
                    word = link.get_text().strip()
                    if self.is_valid_word(word):
                        words.add(word)
                
                time.sleep(2)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {category}: {e}")
                continue
        
        return list(words)
    
    def parse_open_datasets(self) -> List[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤"""
        print("üîç –ü–∞—Ä—Å–∏–Ω–≥ –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤...")
        
        words = set()
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã
        dataset_urls = [
            "https://raw.githubusercontent.com/danakt/russian-words/master/russian.txt",
            "https://raw.githubusercontent.com/hbenbel/Russian-Wordlist/master/russian.txt"
        ]
        
        for url in dataset_urls:
            try:
                print(f"üìÑ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞—Ç–∞—Å–µ—Ç: {url}")
                response = self.session.get(url, timeout=15)
                
                if response.status_code == 200:
                    lines = response.text.split('\n')
                    
                    for line in lines:
                        word = line.strip()
                        if self.is_valid_word(word):
                            words.add(word)
                
                time.sleep(1)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ {url}: {e}")
                continue
        
        return list(words)
    
    def parse_comprehensive_wordlist(self) -> List[str]:
        """–î–æ–±–∞–≤–ª—è–µ–º –æ–±—à–∏—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤"""
        print("üîç –î–æ–±–∞–≤–ª—è—é –æ–±—à–∏—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤...")
        
        # –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π —Å–ø–∏—Å–æ–∫ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        comprehensive_words = [
            # –ü—Ä–∏—Ä–æ–¥–∞ –∏ –æ–∫—Ä—É–∂–∞—é—â–∏–π –º–∏—Ä
            '—Å–æ–ª–Ω—Ü–µ', '–ª—É–Ω–∞', '–∑–≤–µ–∑–¥–∞', '–Ω–µ–±–æ', '–æ–±–ª–∞–∫–æ', '—Ç—É—á–∞', '–¥–æ–∂–¥—å', '—Å–Ω–µ–≥', '–≥—Ä–∞–¥', '–≤–µ—Ç–µ—Ä',
            '—É—Ä–∞–≥–∞–Ω', '—Ç–∞–π—Ñ—É–Ω', '—Ç–æ—Ä–Ω–∞–¥–æ', '–º–æ–ª–Ω–∏—è', '–≥—Ä–æ–º', '—Ä–∞–¥—É–≥–∞', '—Ç—É–º–∞–Ω', '—Ä–æ—Å–∞', '–∏–Ω–µ–π', '—Å–æ—Å—É–ª—å–∫–∞',
            '—Ä–µ–∫–∞', '—Ä—É—á–µ–π', '–æ–∑–µ—Ä–æ', '–º–æ—Ä–µ', '–æ–∫–µ–∞–Ω', '–∑–∞–ª–∏–≤', '–±—É—Ö—Ç–∞', '–ø—Ä–æ–ª–∏–≤', '–∫–∞–Ω–∞–ª', '–≤–æ–¥–æ–ø–∞–¥',
            '–≥–æ—Ä–∞', '—Ö–æ–ª–º', '—Å–∫–∞–ª–∞', '—É—Ç–µ—Å', '–≤–µ—Ä—à–∏–Ω–∞', '–ø–∏–∫', '–ø–µ—Ä–µ–≤–∞–ª', '–¥–æ–ª–∏–Ω–∞', '—É—â–µ–ª—å–µ', '–∫–∞–Ω—å–æ–Ω',
            '–ª–µ—Å', '—Ä–æ—â–∞', '–±–æ—Ä', '–¥—É–±—Ä–∞–≤–∞', '—Å–æ—Å–Ω—è–∫', '–±–µ—Ä–µ–∑–Ω—è–∫', '–µ–ª—å–Ω–∏–∫', '–ª–∏—Å—Ç–≤–µ–Ω–Ω–∏–∫', '–∫–ª–µ–Ω', '–¥—É–±',
            '–±–µ—Ä–µ–∑–∞', '—Å–æ—Å–Ω–∞', '–µ–ª—å', '–ª–∏—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞', '–∫–ª–µ–Ω', '—è—Å–µ–Ω—å', '–ª–∏–ø–∞', '—Ç–æ–ø–æ–ª—å', '–∏–≤–∞', '—Ä—è–±–∏–Ω–∞',
            '–¥–µ—Ä–µ–≤–æ', '—Å—Ç–≤–æ–ª', '–≤–µ—Ç–∫–∞', '–ª–∏—Å—Ç', '—Ö–≤–æ—è', '–∏–≥–ª–∞', '–ø–æ—á–∫–∞', '—Ü–≤–µ—Ç–æ–∫', '–±—É—Ç–æ–Ω', '–ª–µ–ø–µ—Å—Ç–æ–∫',
            '—Ç—Ä–∞–≤–∞', '—Å—Ç–µ–±–µ–ª—å', '–∫–æ—Ä–µ–Ω—å', '—Å–µ–º—è', '–ø–ª–æ–¥', '—è–≥–æ–¥–∞', '–æ—Ä–µ—Ö', '—à–∏—à–∫–∞', '–≥—Ä–∏–±', '–º–æ—Ö',
            '–ª–∏—à–∞–π–Ω–∏–∫', '–ø–∞–ø–æ—Ä–æ—Ç–Ω–∏–∫', '—Ö–≤–æ—â', '–∫—Ä–∞–ø–∏–≤–∞', '–æ–¥—É–≤–∞–Ω—á–∏–∫', '—Ä–æ–º–∞—à–∫–∞', '–≤–∞—Å–∏–ª–µ–∫', '–º–∞–∫', '—Ç—é–ª—å–ø–∞–Ω', '—Ä–æ–∑–∞',
            
            # –ñ–∏–≤–æ—Ç–Ω—ã–µ
            '–∂–∏–≤–æ—Ç–Ω–æ–µ', '–∑–≤–µ—Ä—å', '–º–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–µ–µ', '–ø—Ç–∏—Ü–∞', '—Ä—ã–±–∞', '—Ä–µ–ø—Ç–∏–ª–∏—è', '–∞–º—Ñ–∏–±–∏—è', '–Ω–∞—Å–µ–∫–æ–º–æ–µ', '–ø–∞—É–∫', '—á–µ—Ä–≤—å',
            '—Å–æ–±–∞–∫–∞', '–∫–æ—à–∫–∞', '–ª–æ—à–∞–¥—å', '–∫–æ—Ä–æ–≤–∞', '–±—ã–∫', '—Ç–µ–ª–µ–Ω–æ–∫', '—Å–≤–∏–Ω—å—è', '–ø–æ—Ä–æ—Å–µ–Ω–æ–∫', '–æ–≤—Ü–∞', '—è–≥–Ω–µ–Ω–æ–∫',
            '–∫–æ–∑–∞', '–∫–æ–∑–ª–µ–Ω–æ–∫', '–æ—Å–µ–ª', '–º—É–ª', '–≤–µ—Ä–±–ª—é–¥', '–æ–ª–µ–Ω—å', '–ª–æ—Å—å', '–∫–æ—Å—É–ª—è', '–∫–∞–±–∞–Ω', '–∑–∞—è—Ü',
            '–∫—Ä–æ–ª–∏–∫', '–±–µ–ª–∫–∞', '–±—É—Ä—É–Ω–¥—É–∫', '—Å—É—Ä–æ–∫', '—Å—É—Å–ª–∏–∫', '—Ö–æ–º—è–∫', '–º—ã—à—å', '–∫—Ä—ã—Å–∞', '–±–æ–±—Ä', '–æ–Ω–¥–∞—Ç—Ä–∞',
            '–≤—ã–¥—Ä–∞', '–Ω–æ—Ä–∫–∞', '–∫—É–Ω–∏—Ü–∞', '—Å–æ–±–æ–ª—å', '–≥–æ—Ä–Ω–æ—Å—Ç–∞–π', '–ª–∞—Å–∫–∞', '—Ö–æ—Ä–µ–∫', '–±–∞—Ä—Å—É–∫', '–µ–Ω–æ—Ç', '–ª–∏—Å–∞',
            '–≤–æ–ª–∫', '—à–∞–∫–∞–ª', '–º–µ–¥–≤–µ–¥—å', '–±—É—Ä—ã–π', '–±–µ–ª—ã–π', '–ø–∞–Ω–¥–∞', '—Ç–∏–≥—Ä', '–ª–µ–≤', '–ª–µ–æ–ø–∞—Ä–¥', '–≥–µ–ø–∞—Ä–¥',
            '—Ä—ã—Å—å', '–ø—É–º–∞', '—è–≥—É–∞—Ä', '—Å–ª–æ–Ω', '–Ω–æ—Å–æ—Ä–æ–≥', '–±–µ–≥–µ–º–æ—Ç', '–∂–∏—Ä–∞—Ñ', '–∑–µ–±—Ä–∞', '–∞–Ω—Ç–∏–ª–æ–ø–∞', '–≥–∞–∑–µ–ª—å',
            '–∫–µ–Ω–≥—É—Ä—É', '–∫–æ–∞–ª–∞', '—É—Ç–∫–æ–Ω–æ—Å', '–µ—Ö–∏–¥–Ω–∞', '–∫—Ä–æ–∫–æ–¥–∏–ª', '–∞–ª–ª–∏–≥–∞—Ç–æ—Ä', '—á–µ—Ä–µ–ø–∞—Ö–∞', '—è—â–µ—Ä–∏—Ü–∞', '–∑–º–µ—è', '–≥–∞–¥—é–∫–∞',
            '—É–∂', '–∫–æ–±—Ä–∞', '–ø–∏—Ç–æ–Ω', '—É–¥–∞–≤', '–ª—è–≥—É—à–∫–∞', '–∂–∞–±–∞', '—Ç—Ä–∏—Ç–æ–Ω', '—Å–∞–ª–∞–º–∞–Ω–¥—Ä–∞', '–æ—Ä—ë–ª', '—Å–æ–∫–æ–ª',
            '—è—Å—Ç—Ä–µ–±', '–∫–æ—Ä—à—É–Ω', '–∫–∞–Ω—é–∫', '–±–µ—Ä–∫—É—Ç', '—Å–æ–≤–∞', '—Ñ–∏–ª–∏–Ω', '—Å—ã—á', '–≤–æ—Ä–æ–Ω', '–≤–æ—Ä–æ–Ω–∞', '—Å–æ—Ä–æ–∫–∞',
            '–≥–∞–ª–∫–∞', '–≥—Ä–∞—á', '—Å–∫–≤–æ—Ä–µ—Ü', '–¥—Ä–æ–∑–¥', '—Å–æ–ª–æ–≤–µ–π', '–∂–∞–≤–æ—Ä–æ–Ω–æ–∫', '—á–∏–∂', '—â–µ–≥–æ–ª', '–∫–∞–Ω–∞—Ä–µ–π–∫–∞', '–ø–æ–ø—É–≥–∞–π',
            '–ø–µ—Ç—É—Ö', '–∫—É—Ä–∏—Ü–∞', '—Ü—ã–ø–ª–µ–Ω–æ–∫', '—É—Ç–∫–∞', '—Å–µ–ª–µ–∑–µ–Ω—å', '—É—Ç–µ–Ω–æ–∫', '–≥—É—Å—å', '–ª–µ–±–µ–¥—å', '–∂—É—Ä–∞–≤–ª—å', '–∞–∏—Å—Ç',
            '—Ü–∞–ø–ª—è', '–ø–µ–ª–∏–∫–∞–Ω', '—Ñ–ª–∞–º–∏–Ω–≥–æ', '–ø–∞–≤–ª–∏–Ω', '—Ñ–∞–∑–∞–Ω', '—Ç–µ—Ç–µ—Ä–µ–≤', '–≥–ª—É—Ö–∞—Ä—å', '—Ä—è–±—á–∏–∫', '–∫—É—Ä–æ–ø–∞—Ç–∫–∞', '–ø–µ—Ä–µ–ø–µ–ª',
            '–ø–∏–Ω–≥–≤–∏–Ω', '—á–∞–π–∫–∞', '–±–∞–∫–ª–∞–Ω', '–∫–∞–π—Ä–∞', '—Ç—É–ø–∏–∫', '–∞–ª—å–±–∞—Ç—Ä–æ—Å', '–±—É—Ä–µ–≤–µ—Å—Ç–Ω–∏–∫', '–∫–æ–ª–∏–±—Ä–∏', '–¥—è—Ç—ë–ª', '–ø–æ–ø–æ–ª–∑–µ–Ω—å',
            '—Å–∏–Ω–∏—Ü–∞', '–≤–æ—Ä–æ–±–µ–π', '–∑—è–±–ª–∏–∫', '—á–µ—á–µ—Ç–∫–∞', '–∫–ª–µ—Å—Ç', '—Å–Ω–µ–≥–∏—Ä—å', '—Å–≤–∏—Ä–∏—Å—Ç–µ–ª—å', '–∏–≤–æ–ª–≥–∞', '–∫—É–∫—É—à–∫–∞', '–∫–æ–∑–æ–¥–æ–π',
            '—Å—Ç—Ä–∏–∂', '–ª–∞—Å—Ç–æ—á–∫–∞', '—Å—Ç—Ä–∏–∂', '–∫–æ–∑–æ–¥–æ–π', '—Ä—ã–±–∞', '—â—É–∫–∞', '–æ–∫—É–Ω—å', '–∫–∞—Ä–∞—Å—å', '–ª–µ—â', '–ø–ª–æ—Ç–≤–∞',
            '–∫–∞—Ä–ø', '—Å–æ–º', '–Ω–∞–ª–∏–º', '–Ω–∞–ª–∏–º', '–Ω–∞–ª–∏–º', '–Ω–∞–ª–∏–º', '–Ω–∞–ª–∏–º', '–Ω–∞–ª–∏–º', '–Ω–∞–ª–∏–º', '–Ω–∞–ª–∏–º',
            
            # –õ—é–¥–∏ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
            '—á–µ–ª–æ–≤–µ–∫', '–ª–∏—á–Ω–æ—Å—Ç—å', '–∏–Ω–¥–∏–≤–∏–¥—É—É–º', '–ø–µ—Ä—Å–æ–Ω–∞', '–º—É–∂—á–∏–Ω–∞', '–∂–µ–Ω—â–∏–Ω–∞', '–º–∞–ª—å—á–∏–∫', '–¥–µ–≤–æ—á–∫–∞', '—Ä–µ–±–µ–Ω–æ–∫', '–º–ª–∞–¥–µ–Ω–µ—Ü',
            '–ø–æ–¥—Ä–æ—Å—Ç–æ–∫', '—é–Ω–æ—à–∞', '–¥–µ–≤—É—à–∫–∞', '–º–æ–ª–æ–¥–æ–π', '–≤–∑—Ä–æ—Å–ª—ã–π', '–ø–æ–∂–∏–ª–æ–π', '—Å—Ç–∞—Ä–∏–∫', '—Å—Ç–∞—Ä—É—Ö–∞', '—Å–µ–º—å—è', '—Ä–æ–¥',
            '—Ä–æ–¥–∏—Ç–µ–ª–∏', '–º–∞—Ç—å', '–æ—Ç–µ—Ü', '–º–∞–º–∞', '–ø–∞–ø–∞', '—Å—ã–Ω', '–¥–æ—á—å', '–±—Ä–∞—Ç', '—Å–µ—Å—Ç—Ä–∞', '–¥–µ–¥—É—à–∫–∞',
            '–±–∞–±—É—à–∫–∞', '–≤–Ω—É–∫', '–≤–Ω—É—á–∫–∞', '–¥—è–¥—è', '—Ç—ë—Ç—è', '–ø–ª–µ–º—è–Ω–Ω–∏–∫', '–ø–ª–µ–º—è–Ω–Ω–∏—Ü–∞', '–∫—É–∑–µ–Ω', '–∫—É–∑–∏–Ω–∞', '—Å–≤–µ–∫—Ä–æ–≤—å',
            '—Ç–µ—â–∞', '—Å–≤–µ–∫—Ä', '—Ç–µ—Å—Ç—å', '–∑—è—Ç—å', '–Ω–µ–≤–µ—Å—Ç–∫–∞', '—Å–Ω–æ—Ö–∞', '—à—É—Ä–∏–Ω', '–¥–µ–≤–µ—Ä—å', '–∑–æ–ª–æ–≤–∫–∞', '—Å–≤–æ—è—á–µ–Ω–∏—Ü–∞',
            '—É—á–∏—Ç–µ–ª—å', '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', '–ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä', '–¥–æ—Ü–µ–Ω—Ç', '–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç', '—Å—Ç—É–¥–µ–Ω—Ç', '—É—á–µ–Ω–∏–∫', '—à–∫–æ–ª—å–Ω–∏–∫', '–≤–æ—Å–ø–∏—Ç–∞–Ω–Ω–∏–∫', '–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫',
            '–≤—Ä–∞—á', '–¥–æ–∫—Ç–æ—Ä', '–º–µ–¥–∏–∫', '—Ö–∏—Ä—É—Ä–≥', '—Ç–µ—Ä–∞–ø–µ–≤—Ç', '–ø–µ–¥–∏–∞—Ç—Ä', '–≥–∏–Ω–µ–∫–æ–ª–æ–≥', '–æ–∫—É–ª–∏—Å—Ç', '—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥', '–ø—Å–∏—Ö–∏–∞—Ç—Ä',
            '–º–µ–¥—Å–µ—Å—Ç—Ä–∞', '—Ñ–µ–ª—å–¥—à–µ—Ä', '—Å–∞–Ω–∏—Ç–∞—Ä', '—Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç', '–∞–ø—Ç–µ–∫–∞—Ä—å', '–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä', '–∏–Ω–∂–µ–Ω–µ—Ä', '—Ç–µ—Ö–Ω–∏–∫', '–º–µ—Ö–∞–Ω–∏–∫', '—ç–ª–µ–∫—Ç—Ä–∏–∫',
            '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å', '–∫–∞–º–µ–Ω—â–∏–∫', '–ø–ª–æ—Ç–Ω–∏–∫', '—Å—Ç–æ–ª—è—Ä', '–º–∞–ª—è—Ä', '—à—Ç—É–∫–∞—Ç—É—Ä', '–∫—Ä–æ–≤–µ–ª—å—â–∏–∫', '—Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫', '—Å–≤–∞—Ä—â–∏–∫', '—Ç–æ–∫–∞—Ä—å',
            '—Ñ—Ä–µ–∑–µ—Ä–æ–≤—â–∏–∫', '—Å–ª–µ—Å–∞—Ä—å', '–≤–æ–¥–∏—Ç–µ–ª—å', '—à–æ—Ñ–µ—Ä', '–ø–∏–ª–æ—Ç', '–∫–∞–ø–∏—Ç–∞–Ω', '–º–æ—Ä—è–∫', '–º–∞—Ç—Ä–æ—Å', '–ª–µ—Ç—á–∏–∫', '–±–æ—Ä—Ç–ø—Ä–æ–≤–æ–¥–Ω–∏–∫',
            '–ø–æ–ª–∏—Ü–µ–π—Å–∫–∏–π', '–º–∏–ª–∏—Ü–∏–æ–Ω–µ—Ä', '–¥–µ—Ç–µ–∫—Ç–∏–≤', '—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å', '–ø—Ä–æ–∫—É—Ä–æ—Ä', '—Å—É–¥—å—è', '–∞–¥–≤–æ–∫–∞—Ç', '—é—Ä–∏—Å—Ç', '–Ω–æ—Ç–∞—Ä–∏—É—Å', '–ø—Ä–∏—Å—Ç–∞–≤',
            '–ø–æ–∂–∞—Ä–Ω—ã–π', '—Å–ø–∞—Å–∞—Ç–µ–ª—å', '–≤–æ–µ–Ω–Ω—ã–π', '—Å–æ–ª–¥–∞—Ç', '–æ—Ñ–∏—Ü–µ—Ä', '–≥–µ–Ω–µ—Ä–∞–ª', '–∞–¥–º–∏—Ä–∞–ª', '—Å–µ—Ä–∂–∞–Ω—Ç', '—Ä—è–¥–æ–≤–æ–π', '–º–∞–π–æ—Ä',
            '–ø–æ–≤–∞—Ä', '–∫—É–ª–∏–Ω–∞—Ä', '–∫–æ–Ω–¥–∏—Ç–µ—Ä', '–ø–µ–∫–∞—Ä—å', '–º—è—Å–Ω–∏–∫', '–ø—Ä–æ–¥–∞–≤–µ—Ü', '–∫–∞—Å—Å–∏—Ä', '–º–µ–Ω–µ–¥–∂–µ—Ä', '–¥–∏—Ä–µ–∫—Ç–æ—Ä', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å',
            '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '—Å–µ–∫—Ä–µ—Ç–∞—Ä—å', '–±—É—Ö–≥–∞–ª—Ç–µ—Ä', '—ç–∫–æ–Ω–æ–º–∏—Å—Ç', '—Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç', '–±–∞–Ω–∫–∏—Ä', '–∏–Ω–≤–µ—Å—Ç–æ—Ä', '–±—Ä–æ–∫–µ—Ä', '–∞–Ω–∞–ª–∏—Ç–∏–∫', '–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç',
            '—Ö—É–¥–æ–∂–Ω–∏–∫', '–∂–∏–≤–æ–ø–∏—Å–µ—Ü', '—Å–∫—É–ª—å–ø—Ç–æ—Ä', '–≥—Ä–∞—Ñ–∏–∫', '–¥–∏–∑–∞–π–Ω–µ—Ä', '–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä', '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ', '—Ä–µ–∂–∏—Å—Å–µ—Ä', '–∞–∫—Ç–µ—Ä', '–∞–∫—Ç—Ä–∏—Å–∞',
            '–º—É–∑—ã–∫–∞–Ω—Ç', '–∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä', '–ø–µ–≤–µ—Ü', '–ø–µ–≤–∏—Ü–∞', '—Ç–∞–Ω—Ü–æ—Ä', '—Ç–∞–Ω—Ü–æ–≤—â–∏—Ü–∞', '—Ö–æ—Ä–µ–æ–≥—Ä–∞—Ñ', '–¥–∏—Ä–∏–∂–µ—Ä', '—Å–∫—Ä–∏–ø–∞—á', '–ø–∏–∞–Ω–∏—Å—Ç',
            '–ø–∏—Å–∞—Ç–µ–ª—å', '–ø–æ—ç—Ç', '–∂—É—Ä–Ω–∞–ª–∏—Å—Ç', '—Ä–µ–¥–∞–∫—Ç–æ—Ä', '–∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç', '–≤–µ–¥—É—â–∏–π', '–¥–∏–∫—Ç–æ—Ä', '–∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä', '–∫—Ä–∏—Ç–∏–∫', '–ª–∏—Ç–µ—Ä–∞—Ç–æ—Ä',
            '—É—á–µ–Ω—ã–π', '–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å', '–ª–∞–±–æ—Ä–∞–Ω—Ç', '—Ö–∏–º–∏–∫', '—Ñ–∏–∑–∏–∫', '–º–∞—Ç–µ–º–∞—Ç–∏–∫', '–±–∏–æ–ª–æ–≥', '–≥–µ–æ–ª–æ–≥', '–∞—Å—Ç—Ä–æ–Ω–æ–º', '–∏—Å—Ç–æ—Ä–∏–∫',
            '–∞—Ä—Ö–µ–æ–ª–æ–≥', '–∞–Ω—Ç—Ä–æ–ø–æ–ª–æ–≥', '—Å–æ—Ü–∏–æ–ª–æ–≥', '–ø—Å–∏—Ö–æ–ª–æ–≥', '—Ñ–∏–ª–æ—Å–æ—Ñ', '–ª–∏–Ω–≥–≤–∏—Å—Ç', '—Ñ–∏–ª–æ–ª–æ–≥', '–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫', '–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä', '–≥–∏–¥',
            '—ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥', '—Ç—É—Ä–∏—Å—Ç', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫', '–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å', '–ø–µ—Ä–≤–æ–æ—Ç–∫—Ä—ã–≤–∞—Ç–µ–ª—å', '–º–æ—Ä–µ–ø–ª–∞–≤–∞—Ç–µ–ª—å', '–∫–æ—Å–º–æ–Ω–∞–≤—Ç', '–∞—Å—Ç—Ä–æ–Ω–∞–≤—Ç', '–ø–∏–ª–æ—Ç', '—à—Ç—É—Ä–º–∞–Ω'
        ]
        
        return comprehensive_words
    
    def is_valid_word(self, word: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ –≤–∞–ª–∏–¥–Ω—ã–º"""
        if not word or len(word) < 2 or len(word) > 25:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ–≤–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã
        if not re.match(r'^[–ê-–Ø–∞-—è–Å—ë]+$', word):
            return False
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–≤–∞
        exclude_words = [
            '–∫–∞—Ç–µ–≥–æ—Ä–∏—è', '—Å—Ç—Ä–∞–Ω–∏—Ü–∞', '–≤–∏–∫–∏', '—Å—Å—ã–ª–∫–∞', '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', '–æ–±—Å—É–∂–¥–µ–Ω–∏–µ',
            '–∏—Å—Ç–æ—Ä–∏—è', '—Å–æ–∑–¥–∞—Ç—å', '–ø–æ–∏—Å–∫', '–Ω–∞–≤–∏–≥–∞—Ü–∏—è', '–º–µ–Ω—é', '–∑–∞–≥–æ–ª–æ–≤–æ–∫', '—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ',
            '–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ', '—Å–º', '—Ç–∞–∫–∂–µ', '–≤–Ω–µ—à–Ω–∏–µ', '—Å—Å—ã–ª–∫–∏', '–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', '–ø—Ä–∏–º–µ—á–∞–Ω–∏—è',
            '—à–∞–±–ª–æ–Ω', '–ø—Ä–æ–µ–∫—Ç', '—É—á–∞—Å—Ç–Ω–∏–∫', '–æ–±—Å—É–∂–¥–µ–Ω–∏–µ', '–≤–∫–ª–∞–¥', '–∏—Å—Ç–æ—Ä–∏—è', '—Å–æ–∑–¥–∞—Ç—å',
            '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', '–∏—Å—Ç–æ—á–Ω–∏–∫', '–ø—Ä–∞–≤–∫–∞', '–æ—Ç–º–µ–Ω–∞', '—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å', '–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π'
        ]
        
        if word.lower() in exclude_words:
            return False
        
        return True
    
    def categorize_words(self, words: List[str]) -> Dict[str, List[str]]:
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞ –ø–æ —Ç–∏–ø–∞–º"""
        categories = {
            'nature': [],      # –ü—Ä–∏—Ä–æ–¥–∞
            'animals': [],     # –ñ–∏–≤–æ—Ç–Ω—ã–µ
            'people': [],      # –õ—é–¥–∏
            'professions': [], # –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏
            'home': [],        # –î–æ–º –∏ –±—ã—Ç
            'food': [],        # –ï–¥–∞
            'clothing': [],    # –û–¥–µ–∂–¥–∞
            'transport': [],   # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
            'city': [],        # –ì–æ—Ä–æ–¥
            'time': [],        # –í—Ä–µ–º—è
            'colors': [],      # –¶–≤–µ—Ç–∞
            'qualities': [],   # –ö–∞—á–µ—Å—Ç–≤–∞
            'other': []        # –ü—Ä–æ—á–µ–µ
        }
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
        nature_words = ['—Å–æ–ª–Ω—Ü–µ', '–ª—É–Ω–∞', '–∑–≤–µ–∑–¥–∞', '–Ω–µ–±–æ', '–¥–æ–∂–¥—å', '—Å–Ω–µ–≥', '–≤–µ—Ç–µ—Ä', '—Ä–µ–∫–∞', '–º–æ—Ä–µ', '–≥–æ—Ä–∞', '–ª–µ—Å', '–¥–µ—Ä–µ–≤–æ', '—Ü–≤–µ—Ç–æ–∫', '—Ç—Ä–∞–≤–∞', '–ª–∏—Å—Ç', '–∫–∞–º–µ–Ω—å', '–ø–µ—Å–æ–∫', '–∑–µ–º–ª—è', '–æ–≥–æ–Ω—å', '–≤–æ–¥–∞', '–ª—ë–¥', '–ø–∞—Ä', '—Ç—É–º–∞–Ω']
        animal_words = ['—Å–æ–±–∞–∫–∞', '–∫–æ—à–∫–∞', '–ª–æ—à–∞–¥—å', '–∫–æ—Ä–æ–≤–∞', '–ø—Ç–∏—Ü–∞', '—Ä—ã–±–∞', '–≤–æ–ª–∫', '–º–µ–¥–≤–µ–¥—å', '–ª–∏—Å–∞', '–∑–∞—è—Ü', '–±–µ–ª–∫–∞', '–º—ã—à—å', '–æ—Ä–µ–ª', '—Å–æ–∫–æ–ª', '—Å–æ–≤–∞', '–≤–æ—Ä–æ–Ω', '–ª–µ–±–µ–¥—å', '–∂—É—Ä–∞–≤–ª—å', '–ø–∞–≤–ª–∏–Ω', '—Ç–∏–≥—Ä', '–ª–µ–≤', '—Å–ª–æ–Ω', '–∂–∏—Ä–∞—Ñ', '–∫–µ–Ω–≥—É—Ä—É', '–∫—Ä–æ–∫–æ–¥–∏–ª', '—á–µ—Ä–µ–ø–∞—Ö–∞', '–∑–º–µ—è', '–ª—è–≥—É—à–∫–∞']
        people_words = ['—á–µ–ª–æ–≤–µ–∫', '–º—É–∂—á–∏–Ω–∞', '–∂–µ–Ω—â–∏–Ω–∞', '—Ä–µ–±—ë–Ω–æ–∫', '–º–∞—Ç—å', '–æ—Ç–µ—Ü', '—Å—ã–Ω', '–¥–æ—á—å', '–±—Ä–∞—Ç', '—Å–µ—Å—Ç—Ä–∞', '–¥–µ–¥—É—à–∫–∞', '–±–∞–±—É—à–∫–∞', '–¥—è–¥—è', '—Ç—ë—Ç—è', '–¥—Ä—É–≥', '–ø–æ–¥—Ä—É–≥–∞', '—Å–æ—Å–µ–¥', '–≥–æ—Å—Ç—å', '–∑–Ω–∞–∫–æ–º—ã–π', '–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü']
        profession_words = ['—É—á–∏—Ç–µ–ª—å', '–≤—Ä–∞—á', '–ø–æ–≤–∞—Ä', '–≤–æ–¥–∏—Ç–µ–ª—å', '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å', '—Ö—É–¥–æ–∂–Ω–∏–∫', '–ø–∏—Å–∞—Ç–µ–ª—å', '–º—É–∑—ã–∫–∞–Ω—Ç', '–∞–∫—Ç—ë—Ä', '—Å–ø–æ—Ä—Ç—Å–º–µ–Ω', '–ø–æ–ª–∏—Ü–µ–π—Å–∫–∏–π', '–ø–æ–∂–∞—Ä–Ω—ã–π', '—Å–æ–ª–¥–∞—Ç', '–º–æ—Ä—è–∫', '–ª—ë—Ç—á–∏–∫', '–ø—Ä–æ–¥–∞–≤–µ—Ü', '–º–µ–Ω–µ–¥–∂–µ—Ä', '–¥–∏—Ä–µ–∫—Ç–æ—Ä', '—Å–µ–∫—Ä–µ—Ç–∞—Ä—å', '–±—É—Ö–≥–∞–ª—Ç–µ—Ä']
        home_words = ['–¥–æ–º', '–∫–≤–∞—Ä—Ç–∏—Ä–∞', '–∫–æ–º–Ω–∞—Ç–∞', '–∫—É—Ö–Ω—è', '—Å–ø–∞–ª—å–Ω—è', '–≤–∞–Ω–Ω–∞—è', '–æ–∫–Ω–æ', '–¥–≤–µ—Ä—å', '—Å—Ç–æ–ª', '—Å—Ç—É–ª', '–∫—Ä–æ–≤–∞—Ç—å', '—à–∫–∞—Ñ', '–ø–æ–ª–∫–∞', '–∑–µ—Ä–∫–∞–ª–æ', '–ª–∞–º–ø–∞', '—Ç–µ–ª–µ–≤–∏–∑–æ—Ä', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '—Ç–µ–ª–µ—Ñ–æ–Ω', '—á–∞—Å—ã', '–∫–∞–ª–µ–Ω–¥–∞—Ä—å']
        food_words = ['—Ö–ª–µ–±', '–º—è—Å–æ', '—Ä—ã–±–∞', '–º–æ–ª–æ–∫–æ', '—Å—ã—Ä', '—è–π—Ü–æ', '–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å', '–º–æ—Ä–∫–æ–≤—å', '–ª—É–∫', '–ø–æ–º–∏–¥–æ—Ä', '–æ–≥—É—Ä–µ—Ü', '–∫–∞–ø—É—Å—Ç–∞', '—è–±–ª–æ–∫–æ', '–≥—Ä—É—à–∞', '–±–∞–Ω–∞–Ω', '–∞–ø–µ–ª—å—Å–∏–Ω', '–ª–∏–º–æ–Ω', '–≤–∏–Ω–æ–≥—Ä–∞–¥', '–∫–ª—É–±–Ω–∏–∫–∞', '—Å–∞—Ö–∞—Ä', '—Å–æ–ª—å', '—á–∞–π', '–∫–æ—Ñ–µ']
        clothing_words = ['—Ä—É–±–∞—à–∫–∞', '–ø–ª–∞—Ç—å–µ', '–±—Ä—é–∫–∏', '–ø–∏–¥–∂–∞–∫', '—à–∞–ø–∫–∞', '–æ–±—É–≤—å', '—Ç—É—Ñ–ª–∏', '—Å–∞–ø–æ–≥–∏', '–∫—Ä–æ—Å—Å–æ–≤–∫–∏', '–ø–∞–ª—å—Ç–æ', '–∫—É—Ä—Ç–∫–∞', '—Å–≤–∏—Ç–µ—Ä', '—Ñ—É—Ç–±–æ–ª–∫–∞', '–¥–∂–∏–Ω—Å—ã', '—é–±–∫–∞', '–±–ª—É–∑–∫–∞', '–≥–∞–ª—Å—Ç—É–∫', '–ø–µ—Ä—á–∞—Ç–∫–∏', '—à–∞—Ä—Ñ', '–Ω–æ—Å–∫–∏']
        transport_words = ['–º–∞—à–∏–Ω–∞', '–∞–≤—Ç–æ–±—É—Å', '–ø–æ–µ–∑–¥', '—Å–∞–º–æ–ª—ë—Ç', '–∫–æ—Ä–∞–±–ª—å', '–≤–µ–ª–æ—Å–∏–ø–µ–¥', '–º–æ—Ç–æ—Ü–∏–∫–ª', '—Ç—Ä–∞–º–≤–∞–π', '–º–µ—Ç—Ä–æ', '—Ç–∞–∫—Å–∏', '–≥—Ä—É–∑–æ–≤–∏–∫', '—Ñ—É—Ä–≥–æ–Ω', '—è—Ö—Ç–∞', '–ª–æ–¥–∫–∞', '–≤–µ—Ä—Ç–æ–ª—ë—Ç', '—Ä–∞–∫–µ—Ç–∞', '–∫–∞—Ç–µ—Ä', '–ø–∞—Ä–æ—Ö–æ–¥', '—Ç–µ–ø–ª–æ—Ö–æ–¥', '–±–∞—Ä–∂–∞']
        city_words = ['—É–ª–∏—Ü–∞', '–¥–æ—Ä–æ–≥–∞', '–ø–ª–æ—â–∞–¥—å', '–ø–∞—Ä–∫', '–º–∞–≥–∞–∑–∏–Ω', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–±–æ–ª—å–Ω–∏—Ü–∞', '—à–∫–æ–ª–∞', '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', '–±–∏–±–ª–∏–æ—Ç–µ–∫–∞', '–º—É–∑–µ–π', '—Ç–µ–∞—Ç—Ä', '–∫–∏–Ω–æ', '—Å—Ç–∞–¥–∏–æ–Ω', '–±–∞–Ω–∫', '–ø–æ—á—Ç–∞', '–∞–ø—Ç–µ–∫–∞', '–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è', '–æ—Ç–µ–ª—å', '–≤–æ–∫–∑–∞–ª']
        time_words = ['–≤—Ä–µ–º—è', '—á–∞—Å', '–¥–µ–Ω—å', '–Ω–µ–¥–µ–ª—è', '–º–µ—Å—è—Ü', '–≥–æ–¥', '—É—Ç—Ä–æ', '–≤–µ—á–µ—Ä', '–Ω–æ—á—å', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π', '–∏—é–Ω—å', '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å']
        color_words = ['–∫—Ä–∞—Å–Ω—ã–π', '—Å–∏–Ω–∏–π', '–∑–µ–ª—ë–Ω—ã–π', '–∂—ë–ª—Ç—ã–π', '—á—ë—Ä–Ω—ã–π', '–±–µ–ª—ã–π', '—Å–µ—Ä—ã–π', '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π', '—Ä–æ–∑–æ–≤—ã–π', '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π', '–æ—Ä–∞–Ω–∂–µ–≤—ã–π', '–≥–æ–ª—É–±–æ–π', '–±–æ—Ä–¥–æ–≤—ã–π', '–∑–æ–ª–æ—Ç–æ–π', '—Å–µ—Ä–µ–±—Ä—è–Ω—ã–π', '–º–µ–¥–Ω—ã–π', '–±—Ä–æ–Ω–∑–æ–≤—ã–π']
        quality_words = ['–±–æ–ª—å—à–æ–π', '–º–∞–ª–µ–Ω—å–∫–∏–π', '—Ö–æ—Ä–æ—à–∏–π', '–ø–ª–æ—Ö–æ–π', '–∫—Ä–∞—Å–∏–≤—ã–π', '–Ω–æ–≤—ã–π', '—Å—Ç–∞—Ä—ã–π', '–º–æ–ª–æ–¥–æ–π', '–±—ã—Å—Ç—Ä—ã–π', '–º–µ–¥–ª–µ–Ω–Ω—ã–π', '–≥–æ—Ä—è—á–∏–π', '—Ö–æ–ª–æ–¥–Ω—ã–π', '—Å–≤–µ—Ç–ª—ã–π', '—Ç—ë–º–Ω—ã–π', '–≥—Ä–æ–º–∫–∏–π', '—Ç–∏—Ö–∏–π', '–º—è–≥–∫–∏–π', '—Ç–≤—ë—Ä–¥—ã–π', '–ª—ë–≥–∫–∏–π', '—Ç—è–∂—ë–ª—ã–π', '–¥–æ—Ä–æ–≥–æ–π', '–¥–µ—à—ë–≤—ã–π', '–±–æ–≥–∞—Ç—ã–π', '–±–µ–¥–Ω—ã–π', '—É–º–Ω—ã–π', '–≥–ª—É–ø—ã–π', '–≤–µ—Å—ë–ª—ã–π', '–≥—Ä—É—Å—Ç–Ω—ã–π', '–∑–ª–æ–π', '–¥–æ–±—Ä—ã–π', '—á–µ—Å—Ç–Ω—ã–π', '–ª–∂–∏–≤—ã–π', '—Å–º–µ–ª—ã–π', '—Ç—Ä—É—Å–ª–∏–≤—ã–π', '—Å–∏–ª—å–Ω—ã–π', '—Å–ª–∞–±—ã–π', '–∑–¥–æ—Ä–æ–≤—ã–π', '–±–æ–ª—å–Ω–æ–π']
        
        for word in words:
            if word in nature_words:
                categories['nature'].append(word)
            elif word in animal_words:
                categories['animals'].append(word)
            elif word in people_words:
                categories['people'].append(word)
            elif word in profession_words:
                categories['professions'].append(word)
            elif word in home_words:
                categories['home'].append(word)
            elif word in food_words:
                categories['food'].append(word)
            elif word in clothing_words:
                categories['clothing'].append(word)
            elif word in transport_words:
                categories['transport'].append(word)
            elif word in city_words:
                categories['city'].append(word)
            elif word in time_words:
                categories['time'].append(word)
            elif word in color_words:
                categories['colors'].append(word)
            elif word in quality_words:
                categories['qualities'].append(word)
            else:
                categories['other'].append(word)
        
        return categories
    
    def save_to_json(self, data: Dict, filename: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤...")
        
        # –ü–∞—Ä—Å–∏–º –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        corpus_words = self.parse_national_corpus()
        wiktionary_words = self.parse_wiktionary_enhanced()
        dataset_words = self.parse_open_datasets()
        comprehensive_words = self.parse_comprehensive_wordlist()
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–ª–æ–≤–∞
        all_words = set(corpus_words + wiktionary_words + dataset_words + comprehensive_words)
        
        # –û—á–∏—â–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º
        cleaned_words = []
        for word in all_words:
            if self.is_valid_word(word):
                cleaned_words.append(word.lower())
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        unique_words = sorted(list(set(cleaned_words)))
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞
        categorized_words = self.categorize_words(unique_words)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        result = {
            'words': unique_words,
            'categorizedWords': categorized_words,
            'totalWords': len(unique_words),
            'sources': [
                '–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—Ä–ø—É—Å —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
                '–í–∏–∫–∏—Å–ª–æ–≤–∞—Ä—å - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                '–û—Ç–∫—Ä—ã—Ç—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã —Å–ª–æ–≤',
                '–û–±—à–∏—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤'
            ],
            'lastUpdated': time.strftime('%Y-%m-%d %H:%M:%S')
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.save_to_json(result, '../src/data/enhanced_words.json')
        
        print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤: {len(unique_words)}")
        print(f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categorized_words)}")

if __name__ == "__main__":
    parser = EnhancedWordsParser()
    parser.run()
