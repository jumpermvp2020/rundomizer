#!/usr/bin/env python3
"""
–ü–∞—Ä—Å–µ—Ä —Ä—É—Å—Å–∫–∏—Ö –∏–º–µ–Ω –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
–°–æ–±–∏—Ä–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –í–∏–∫–∏–ø–µ–¥–∏–∏ –∏ –¥—Ä—É–≥–∏—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
"""

import requests
from bs4 import BeautifulSoup
import json
import re
import time
from typing import List, Set

class RussianNamesParser:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        
    def parse_wikipedia_names(self) -> dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∏–º–µ–Ω –∏–∑ –í–∏–∫–∏–ø–µ–¥–∏–∏"""
        print("üîç –ü–∞—Ä—Å–∏–Ω–≥ –∏–º–µ–Ω –∏–∑ –í–∏–∫–∏–ø–µ–¥–∏–∏...")
        
        # –°—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Ä—É—Å—Å–∫–∏–º–∏ –∏–º–µ–Ω–∞–º–∏
        urls = [
            "https://ru.wikipedia.org/wiki/–°–ø–∏—Å–æ–∫_–ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö_—Ä—É—Å—Å–∫–∏—Ö_–∏–º—ë–Ω",
            "https://ru.wikipedia.org/wiki/–ö–∞—Ç–µ–≥–æ—Ä–∏—è:–†—É—Å—Å–∫–∏–µ_–º—É–∂—Å–∫–∏–µ_–∏–º–µ–Ω–∞",
            "https://ru.wikipedia.org/wiki/–ö–∞—Ç–µ–≥–æ—Ä–∏—è:–†—É—Å—Å–∫–∏–µ_–∂–µ–Ω—Å–∫–∏–µ_–∏–º–µ–Ω–∞"
        ]
        
        male_names = set()
        female_names = set()
        
        for url in urls:
            try:
                print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {url}")
                response = self.session.get(url, timeout=10)
                response.raise_for_status()
                
                soup = BeautifulSoup(response.content, 'html.parser')
                
                # –ò—â–µ–º –∏–º–µ–Ω–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
                for element in soup.find_all(['li', 'td', 'a']):
                    text = element.get_text().strip()
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –∏–º–µ–Ω–∞
                    if self.is_russian_name(text):
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∏–ª–∏ –¥—Ä—É–≥–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
                        if self.is_male_name(text, element):
                            male_names.add(text)
                        elif self.is_female_name(text, element):
                            female_names.add(text)
                
                time.sleep(1)  # –í–µ–∂–ª–∏–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {url}: {e}")
                continue
        
        return {
            'male': list(male_names),
            'female': list(female_names)
        }
    
    def parse_open_sources(self) -> dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∏–∑ –¥—Ä—É–≥–∏—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        print("üîç –ü–∞—Ä—Å–∏–Ω–≥ –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        
        # –°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –∏–º–µ–Ω–∞–º–∏
        sources = [
            {
                'url': 'https://imena-znachenie.ru/popularnye-russkie-imena',
                'type': 'popular'
            },
            {
                'url': 'https://kakzovut.ru/russkie-imena',
                'type': 'general'
            }
        ]
        
        male_names = set()
        female_names = set()
        
        for source in sources:
            try:
                print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {source['url']}")
                response = self.session.get(source['url'], timeout=10)
                response.raise_for_status()
                
                soup = BeautifulSoup(response.content, 'html.parser')
                
                # –ò—â–µ–º –∏–º–µ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ
                for element in soup.find_all(['div', 'span', 'p', 'li']):
                    text = element.get_text().strip()
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º–µ–Ω–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
                    names = self.extract_names_from_text(text)
                    
                    for name in names:
                        if self.is_male_name(name, element):
                            male_names.add(name)
                        elif self.is_female_name(name, element):
                            female_names.add(name)
                
                time.sleep(2)  # –í–µ–∂–ª–∏–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {source['url']}: {e}")
                continue
        
        return {
            'male': list(male_names),
            'female': list(female_names)
        }
    
    def is_russian_name(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Ä—É—Å—Å–∫–∏–º –∏–º–µ–Ω–µ–º"""
        if not text or len(text) < 2 or len(text) > 20:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã
        if not re.match(r'^[–ê-–Ø–∞-—è–Å—ë\s\-]+$', text):
            return False
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –æ–±—â–∏–µ —Å–ª–æ–≤–∞
        exclude_words = ['–∏–º—è', '–∏–º–µ–Ω–∞', '—Å–ø–∏—Å–æ–∫', '–∫–∞—Ç–µ–≥–æ—Ä–∏—è', '—Å—Ç—Ä–∞–Ω–∏—Ü–∞', '–≤–∏–∫–∏–ø–µ–¥–∏—è']
        if any(word in text.lower() for word in exclude_words):
            return False
        
        return True
    
    def is_male_name(self, name: str, element) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–º—è –º—É–∂—Å–∫–∏–º"""
        # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–∞ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è–º
        male_endings = ['–æ–≤', '–µ–≤', '–∏–Ω', '—Å–∫–∏–π', '—Ü–∫–∏–π', '–∏—á', '–æ–Ω', '–µ–Ω']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ —ç–ª–µ–º–µ–Ω—Ç–∞
        context = str(element.parent) if element.parent else ""
        
        male_indicators = ['–º—É–∂—Å–∫', '–º–∞–ª—å—á–∏–∫', '–ø–∞–ø–∞', '—Å—ã–Ω', '–±—Ä–∞—Ç', '–º—É–∂']
        female_indicators = ['–∂–µ–Ω—Å–∫', '–¥–µ–≤–æ—á–∫–∞', '–º–∞–º–∞', '–¥–æ—á—å', '—Å–µ—Å—Ç—Ä–∞', '–∂–µ–Ω–∞']
        
        if any(indicator in context.lower() for indicator in male_indicators):
            return True
        if any(indicator in context.lower() for indicator in female_indicators):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è
        for ending in male_endings:
            if name.lower().endswith(ending):
                return True
        
        return False
    
    def is_female_name(self, name: str, element) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–º—è –∂–µ–Ω—Å–∫–∏–º"""
        # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–∞ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è–º
        female_endings = ['–∞', '—è', '–æ–≤–∞', '–µ–≤–∞', '–∏–Ω–∞', '—Å–∫–∞—è', '—Ü–∫–∞—è']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ —ç–ª–µ–º–µ–Ω—Ç–∞
        context = str(element.parent) if element.parent else ""
        
        female_indicators = ['–∂–µ–Ω—Å–∫', '–¥–µ–≤–æ—á–∫–∞', '–º–∞–º–∞', '–¥–æ—á—å', '—Å–µ—Å—Ç—Ä–∞', '–∂–µ–Ω–∞']
        male_indicators = ['–º—É–∂—Å–∫', '–º–∞–ª—å—á–∏–∫', '–ø–∞–ø–∞', '—Å—ã–Ω', '–±—Ä–∞—Ç', '–º—É–∂']
        
        if any(indicator in context.lower() for indicator in female_indicators):
            return True
        if any(indicator in context.lower() for indicator in male_indicators):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è
        for ending in female_endings:
            if name.lower().endswith(ending):
                return True
        
        return False
    
    def extract_names_from_text(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞
        words = re.findall(r'[–ê-–Ø–∞-—è–Å—ë]+', text)
        
        names = []
        for word in words:
            if self.is_russian_name(word):
                names.append(word)
        
        return names
    
    def clean_and_validate_names(self, names: List[str]) -> List[str]:
        """–û—á–∏—â–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω"""
        cleaned = []
        
        for name in names:
            # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            name = re.sub(r'[^\w\-]', '', name.strip())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
            if 2 <= len(name) <= 20 and re.match(r'^[–ê-–Ø–∞-—è–Å—ë]+$', name):
                # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
                name = name.capitalize()
                cleaned.append(name)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        return sorted(list(set(cleaned)))
    
    def save_to_json(self, data: dict, filename: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ —Ä—É—Å—Å–∫–∏—Ö –∏–º–µ–Ω...")
        
        # –ü–∞—Ä—Å–∏–º –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        wikipedia_data = self.parse_wikipedia_names()
        open_sources_data = self.parse_open_sources()
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        all_male_names = set(wikipedia_data['male'] + open_sources_data['male'])
        all_female_names = set(wikipedia_data['female'] + open_sources_data['female'])
        
        # –û—á–∏—â–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º
        cleaned_male = self.clean_and_validate_names(list(all_male_names))
        cleaned_female = self.clean_and_validate_names(list(all_female_names))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        result = {
            'maleNames': cleaned_male,
            'femaleNames': cleaned_female,
            'totalMale': len(cleaned_male),
            'totalFemale': len(cleaned_female),
            'totalNames': len(cleaned_male) + len(cleaned_female),
            'sources': [
                '–í–∏–∫–∏–ø–µ–¥–∏—è - —Å–ø–∏—Å–∫–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä—É—Å—Å–∫–∏—Ö –∏–º–µ–Ω',
                '–û—Ç–∫—Ä—ã—Ç—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å –±–∞–∑–∞–º–∏ –∏–º–µ–Ω'
            ],
            'lastUpdated': time.strftime('%Y-%m-%d %H:%M:%S')
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.save_to_json(result, '../src/data/parsed_names.json')
        
        print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –º—É–∂—Å–∫–∏—Ö –∏–º–µ–Ω: {len(cleaned_male)}")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∂–µ–Ω—Å–∫–∏—Ö –∏–º–µ–Ω: {len(cleaned_female)}")
        print(f"üìä –í—Å–µ–≥–æ –∏–º–µ–Ω: {len(cleaned_male) + len(cleaned_female)}")

if __name__ == "__main__":
    parser = RussianNamesParser()
    parser.run()
