#!/usr/bin/env python3
"""
–ü–∞—Ä—Å–µ—Ä —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤ –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
–°–æ–±–∏—Ä–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–ª–æ–≤–∞—Ä–µ–π –∏ –∫–æ—Ä–ø—É—Å–æ–≤
"""

import requests
from bs4 import BeautifulSoup
import json
import re
import time
from typing import List, Set, Dict

class RussianWordsParser:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        
    def parse_wiktionary(self) -> List[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–ª–æ–≤ –∏–∑ –í–∏–∫–∏—Å–ª–æ–≤–∞—Ä—è"""
        print("üîç –ü–∞—Ä—Å–∏–Ω–≥ —Å–ª–æ–≤ –∏–∑ –í–∏–∫–∏—Å–ª–æ–≤–∞—Ä—è...")
        
        words = set()
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–æ–≤ –≤ –í–∏–∫–∏—Å–ª–æ–≤–∞—Ä–µ
        categories = [
            "https://ru.wiktionary.org/wiki/–ö–∞—Ç–µ–≥–æ—Ä–∏—è:–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ_—Ä—É—Å—Å–∫–æ–≥–æ_—è–∑—ã–∫–∞",
            "https://ru.wiktionary.org/wiki/–ö–∞—Ç–µ–≥–æ—Ä–∏—è:–ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ_—Ä—É—Å—Å–∫–æ–≥–æ_—è–∑—ã–∫–∞",
            "https://ru.wiktionary.org/wiki/–ö–∞—Ç–µ–≥–æ—Ä–∏—è:–ì–ª–∞–≥–æ–ª—ã_—Ä—É—Å—Å–∫–æ–≥–æ_—è–∑—ã–∫–∞"
        ]
        
        for category_url in categories:
            try:
                print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {category_url}")
                
                response = self.session.get(category_url, timeout=10)
                response.raise_for_status()
                
                soup = BeautifulSoup(response.content, 'html.parser')
                
                # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–ª–æ–≤–∞
                word_links = soup.find_all('a', href=re.compile(r'/wiki/[–ê-–Ø–∞-—è–Å—ë]'))
                
                for link in word_links:
                    word = link.get_text().strip()
                    if self.is_valid_word(word):
                        words.add(word)
                
                time.sleep(2)  # –í–µ–∂–ª–∏–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {category_url}: {e}")
                continue
        
        return list(words)
    
    def parse_open_sources(self) -> List[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∏–∑ –¥—Ä—É–≥–∏—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        print("üîç –ü–∞—Ä—Å–∏–Ω–≥ –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        
        words = set()
        
        # –û—Ç–∫—Ä—ã—Ç—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–æ —Å–ª–æ–≤–∞–º–∏
        sources = [
            {
                'url': 'https://ru.wiktionary.org/wiki/–°–ª—É–∂–µ–±–Ω–∞—è:–í—Å–µ_—Å—Ç—Ä–∞–Ω–∏—Ü—ã',
                'type': 'wiktionary_pages'
            }
        ]
        
        for source in sources:
            try:
                print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {source['url']}")
                
                response = self.session.get(source['url'], timeout=10)
                response.raise_for_status()
                
                soup = BeautifulSoup(response.content, 'html.parser')
                
                # –ò—â–µ–º —Å–ª–æ–≤–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
                word_elements = soup.find_all(['a', 'span', 'div'], string=re.compile(r'^[–ê-–Ø–∞-—è–Å—ë]+$'))
                
                for element in word_elements:
                    word = element.get_text().strip()
                    if self.is_valid_word(word):
                        words.add(word)
                
                time.sleep(2)  # –í–µ–∂–ª–∏–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {source['url']}: {e}")
                continue
        
        return list(words)
    
    def parse_common_words(self) -> List[str]:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞"""
        print("üîç –î–æ–±–∞–≤–ª—è—é —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–ª–æ–≤–∞...")
        
        # –ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–ª–æ–≤
        common_words = [
            # –ü—Ä–∏—Ä–æ–¥–∞
            '—Å–æ–ª–Ω—Ü–µ', '–ª—É–Ω–∞', '–∑–≤–µ–∑–¥–∞', '–Ω–µ–±–æ', '–æ–±–ª–∞–∫–æ', '–¥–æ–∂–¥—å', '—Å–Ω–µ–≥', '–≤–µ—Ç–µ—Ä', '–≥—Ä–æ–º', '–º–æ–ª–Ω–∏—è',
            '—Ä–µ–∫–∞', '–º–æ—Ä–µ', '–æ–∫–µ–∞–Ω', '–æ–∑–µ—Ä–æ', '–≥–æ—Ä–∞', '—Ö–æ–ª–º', '–ª–µ—Å', '–¥–µ—Ä–µ–≤–æ', '–ª–∏—Å—Ç', '—Ü–≤–µ—Ç–æ–∫',
            '—Ç—Ä–∞–≤–∞', '–∫–∞–º–µ–Ω—å', '–ø–µ—Å–æ–∫', '–∑–µ–º–ª—è', '–æ–≥–æ–Ω—å', '–≤–æ–¥–∞', '–ª—ë–¥', '–ø–∞—Ä', '—Ç—É–º–∞–Ω',
            
            # –ñ–∏–≤–æ—Ç–Ω—ã–µ
            '—Å–æ–±–∞–∫–∞', '–∫–æ—à–∫–∞', '–ª–æ—à–∞–¥—å', '–∫–æ—Ä–æ–≤–∞', '—Å–≤–∏–Ω—å—è', '–æ–≤—Ü–∞', '–∫–æ–∑–∞', '–∫—É—Ä–∏—Ü–∞', '—É—Ç–∫–∞', '–≥—É—Å—å',
            '–≤–æ–ª–∫', '–º–µ–¥–≤–µ–¥—å', '–ª–∏—Å–∞', '–∑–∞—è—Ü', '–±–µ–ª–∫–∞', '–º—ã—à—å', '–∫—Ä—ã—Å–∞', '–ø—Ç–∏—Ü–∞', '–æ—Ä—ë–ª', '—Å–æ–∫–æ–ª',
            '—Å–æ–≤–∞', '–≤–æ—Ä–æ–Ω', '–≤–æ—Ä–æ–±–µ–π', '—Å–∏–Ω–∏—Ü–∞', '—Ä—ã–±–∞', '–∞–∫—É–ª–∞', '–∫–∏—Ç', '–¥–µ–ª—å—Ñ–∏–Ω', '–∑–º–µ—è', '–ª—è–≥—É—à–∫–∞',
            
            # –õ—é–¥–∏
            '—á–µ–ª–æ–≤–µ–∫', '–º—É–∂—á–∏–Ω–∞', '–∂–µ–Ω—â–∏–Ω–∞', '—Ä–µ–±—ë–Ω–æ–∫', '–º–∞–ª—å—á–∏–∫', '–¥–µ–≤–æ—á–∫–∞', '–º–∞—Ç—å', '–æ—Ç–µ—Ü', '—Å—ã–Ω', '–¥–æ—á—å',
            '–±—Ä–∞—Ç', '—Å–µ—Å—Ç—Ä–∞', '–¥–µ–¥—É—à–∫–∞', '–±–∞–±—É—à–∫–∞', '–¥—è–¥—è', '—Ç—ë—Ç—è', '–¥—Ä—É–≥', '–ø–æ–¥—Ä—É–≥–∞', '—Å–æ—Å–µ–¥', '–≥–æ—Å—Ç—å',
            
            # –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏
            '—É—á–∏—Ç–µ–ª—å', '–≤—Ä–∞—á', '–ø–æ–≤–∞—Ä', '–≤–æ–¥–∏—Ç–µ–ª—å', '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å', '—Ö—É–¥–æ–∂–Ω–∏–∫', '–ø–∏—Å–∞—Ç–µ–ª—å', '–º—É–∑—ã–∫–∞–Ω—Ç',
            '–∞–∫—Ç—ë—Ä', '—Å–ø–æ—Ä—Ç—Å–º–µ–Ω', '–ø–æ–ª–∏—Ü–µ–π—Å–∫–∏–π', '–ø–æ–∂–∞—Ä–Ω—ã–π', '—Å–æ–ª–¥–∞—Ç', '–º–æ—Ä—è–∫', '–ª—ë—Ç—á–∏–∫', '–ø—Ä–æ–¥–∞–≤–µ—Ü',
            
            # –î–æ–º –∏ –±—ã—Ç
            '–¥–æ–º', '–∫–≤–∞—Ä—Ç–∏—Ä–∞', '–∫–æ–º–Ω–∞—Ç–∞', '–∫—É—Ö–Ω—è', '—Å–ø–∞–ª—å–Ω—è', '–≤–∞–Ω–Ω–∞—è', '–æ–∫–Ω–æ', '–¥–≤–µ—Ä—å', '—Å—Ç–µ–Ω–∞', '–ø–æ–ª',
            '–ø–æ—Ç–æ–ª–æ–∫', '–∫—Ä—ã—à–∞', '–ª–µ—Å—Ç–Ω–∏—Ü–∞', '–±–∞–ª–∫–æ–Ω', '–ø–æ–¥–≤–∞–ª', '—á–µ—Ä–¥–∞–∫', '—Å—Ç–æ–ª', '—Å—Ç—É–ª', '–∫—Ä–æ–≤–∞—Ç—å', '—à–∫–∞—Ñ',
            '–ø–æ–ª–∫–∞', '–∑–µ—Ä–∫–∞–ª–æ', '–ª–∞–º–ø–∞', '—Å–≤–µ—á–∞', '—Ç–µ–ª–µ–≤–∏–∑–æ—Ä', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '—Ç–µ–ª–µ—Ñ–æ–Ω', '—á–∞—Å—ã', '–∫–∞–ª–µ–Ω–¥–∞—Ä—å',
            
            # –ï–¥–∞
            '—Ö–ª–µ–±', '–º—è—Å–æ', '—Ä—ã–±–∞', '–∫—É—Ä–∏—Ü–∞', '–≥–æ–≤—è–¥–∏–Ω–∞', '—Å–≤–∏–Ω–∏–Ω–∞', '–∫–æ–ª–±–∞—Å–∞', '—Å—ã—Ä', '–º–æ–ª–æ–∫–æ', '–∫–µ—Ñ–∏—Ä',
            '–π–æ–≥—É—Ä—Ç', '—Ç–≤–æ—Ä–æ–≥', '—Å–º–µ—Ç–∞–Ω–∞', '–º–∞—Å–ª–æ', '—è–π—Ü–æ', '–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å', '–º–æ—Ä–∫–æ–≤—å', '–ª—É–∫', '—á–µ—Å–Ω–æ–∫', '–ø–æ–º–∏–¥–æ—Ä',
            '–æ–≥—É—Ä–µ—Ü', '–∫–∞–ø—É—Å—Ç–∞', '—Å–≤—ë–∫–ª–∞', '—è–±–ª–æ–∫–æ', '–≥—Ä—É—à–∞', '–±–∞–Ω–∞–Ω', '–∞–ø–µ–ª—å—Å–∏–Ω', '–ª–∏–º–æ–Ω', '–≤–∏–Ω–æ–≥—Ä–∞–¥', '–∫–ª—É–±–Ω–∏–∫–∞',
            '—Å–∞—Ö–∞—Ä', '—Å–æ–ª—å', '–ø–µ—Ä–µ—Ü', '—á–∞–π', '–∫–æ—Ñ–µ', '—Å–æ–∫', '–≤–æ–¥–∞', '–º—ë–¥', '–≤–∞—Ä–µ–Ω—å–µ', '—Ç–æ—Ä—Ç', '–ø–µ—á–µ–Ω—å–µ',
            
            # –û–¥–µ–∂–¥–∞
            '—Ä—É–±–∞—à–∫–∞', '–±–ª—É–∑–∫–∞', '–ø–ª–∞—Ç—å–µ', '—é–±–∫–∞', '–±—Ä—é–∫–∏', '–¥–∂–∏–Ω—Å—ã', '—à–æ—Ä—Ç—ã', '–ø–∏–¥–∂–∞–∫', '–∫—É—Ä—Ç–∫–∞', '–ø–∞–ª—å—Ç–æ',
            '–ø–ª–∞—â', '—à–∞–ø–∫–∞', '—à–ª—è–ø–∞', '—à–∞—Ä—Ñ', '–ø–µ—Ä—á–∞—Ç–∫–∏', '–Ω–æ—Å–∫–∏', '–∫–æ–ª–≥–æ—Ç–∫–∏', '—Ç—Ä—É—Å—ã', '–º–∞–π–∫–∞', '—Ñ—É—Ç–±–æ–ª–∫–∞',
            '–æ–±—É–≤—å', '—Ç—É—Ñ–ª–∏', '—Å–∞–ø–æ–≥–∏', '–∫—Ä–æ—Å—Å–æ–≤–∫–∏', '–±–æ—Ç–∏–Ω–∫–∏', '—Å–∞–Ω–¥–∞–ª–∏–∏', '—Ç–∞–ø–æ—á–∫–∏', '–≥–∞–ª—Å—Ç—É–∫', '–ø–æ—è—Å',
            
            # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
            '–º–∞—à–∏–Ω–∞', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å', '–∞–≤—Ç–æ–±—É—Å', '—Ç—Ä–æ–ª–ª–µ–π–±—É—Å', '—Ç—Ä–∞–º–≤–∞–π', '–º–µ—Ç—Ä–æ', '–ø–æ–µ–∑–¥', '—Å–∞–º–æ–ª—ë—Ç', '–≤–µ—Ä—Ç–æ–ª—ë—Ç',
            '–∫–æ—Ä–∞–±–ª—å', '–ª–æ–¥–∫–∞', '—è—Ö—Ç–∞', '–≤–µ–ª–æ—Å–∏–ø–µ–¥', '–º–æ—Ç–æ—Ü–∏–∫–ª', '—Å–∫—É—Ç–µ—Ä', '—Ç–∞–∫—Å–∏', '–≥—Ä—É–∑–æ–≤–∏–∫', '—Ñ—É—Ä–≥–æ–Ω',
            
            # –ì–æ—Ä–æ–¥
            '—É–ª–∏—Ü–∞', '–¥–æ—Ä–æ–≥–∞', '—Ç—Ä–æ—Ç—É–∞—Ä', '–ø–ª–æ—â–∞–¥—å', '–ø–∞—Ä–∫', '—Å–∞–¥', '—Å–∫–≤–µ—Ä', '–º–æ—Å—Ç', '—Ç—É–Ω–Ω–µ–ª—å', '–ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–æ–∫',
            '—Å–≤–µ—Ç–æ—Ñ–æ—Ä', '–∑–Ω–∞–∫', '–æ—Å—Ç–∞–Ω–æ–≤–∫–∞', '—Å—Ç–∞–Ω—Ü–∏—è', '–≤–æ–∫–∑–∞–ª', '–∞—ç—Ä–æ–ø–æ—Ä—Ç', '–ø–æ—Ä—Ç', '–º–∞–≥–∞–∑–∏–Ω', '—Ä—ã–Ω–æ–∫',
            '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–∫–∞—Ñ–µ', '–±–∞—Ä', '–æ—Ç–µ–ª—å', '–±–æ–ª—å–Ω–∏—Ü–∞', '–ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞', '—à–∫–æ–ª–∞', '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', '–±–∏–±–ª–∏–æ—Ç–µ–∫–∞',
            '–º—É–∑–µ–π', '—Ç–µ–∞—Ç—Ä', '–∫–∏–Ω–æ', '—Å—Ç–∞–¥–∏–æ–Ω', '—Å–ø–æ—Ä—Ç–∑–∞–ª', '–±–∞–Ω–∫', '–ø–æ—á—Ç–∞', '–∞–ø—Ç–µ–∫–∞', '–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è',
            
            # –í—Ä–µ–º—è
            '–≤—Ä–µ–º—è', '—á–∞—Å', '–º–∏–Ω—É—Ç–∞', '—Å–µ–∫—É–Ω–¥–∞', '—É—Ç—Ä–æ', '–¥–µ–Ω—å', '–≤–µ—á–µ—Ä', '–Ω–æ—á—å', '–Ω–µ–¥–µ–ª—è', '–º–µ—Å—è—Ü', '–≥–æ–¥',
            '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
            '—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π', '–∏—é–Ω—å', '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å',
            '–≤–µ—Å–Ω–∞', '–ª–µ—Ç–æ', '–æ—Å–µ–Ω—å', '–∑–∏–º–∞', '–ø—Ä–∞–∑–¥–Ω–∏–∫', '–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', '–Ω–æ–≤—ã–π –≥–æ–¥', '—Ä–æ–∂–¥–µ—Å—Ç–≤–æ', '–ø–∞—Å—Ö–∞',
            
            # –¶–≤–µ—Ç–∞
            '–∫—Ä–∞—Å–Ω—ã–π', '—Å–∏–Ω–∏–π', '–∑–µ–ª—ë–Ω—ã–π', '–∂—ë–ª—Ç—ã–π', '—á—ë—Ä–Ω—ã–π', '–±–µ–ª—ã–π', '—Å–µ—Ä—ã–π', '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π', '—Ä–æ–∑–æ–≤—ã–π', '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π',
            '–æ—Ä–∞–Ω–∂–µ–≤—ã–π', '–≥–æ–ª—É–±–æ–π', '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π', '–±–æ—Ä–¥–æ–≤—ã–π', '–∑–æ–ª–æ—Ç–æ–π', '—Å–µ—Ä–µ–±—Ä—è–Ω—ã–π', '–º–µ–¥–Ω—ã–π', '–±—Ä–æ–Ω–∑–æ–≤—ã–π',
            
            # –†–∞–∑–º–µ—Ä—ã –∏ –∫–∞—á–µ—Å—Ç–≤–∞
            '–±–æ–ª—å—à–æ–π', '–º–∞–ª–µ–Ω—å–∫–∏–π', '–≤—ã—Å–æ–∫–∏–π', '–Ω–∏–∑–∫–∏–π', '—à–∏—Ä–æ–∫–∏–π', '—É–∑–∫–∏–π', '—Ç–æ–ª—Å—Ç—ã–π', '—Ç–æ–Ω–∫–∏–π', '–¥–ª–∏–Ω–Ω—ã–π', '–∫–æ—Ä–æ—Ç–∫–∏–π',
            '—Ö–æ—Ä–æ—à–∏–π', '–ø–ª–æ—Ö–æ–π', '–∫—Ä–∞—Å–∏–≤—ã–π', '—É—Ä–æ–¥–ª–∏–≤—ã–π', '–Ω–æ–≤—ã–π', '—Å—Ç–∞—Ä—ã–π', '–º–æ–ª–æ–¥–æ–π', '–∑—Ä–µ–ª—ã–π', '—Å–≤–µ–∂–∏–π', '—Å—É—Ö–æ–π',
            '–º–æ–∫—Ä—ã–π', '—á–∏—Å—Ç—ã–π', '–≥—Ä—è–∑–Ω—ã–π', '—è—Ä–∫–∏–π', '—Ç—É—Å–∫–ª—ã–π', '–∂–∏–≤–æ–π', '–º—ë—Ä—Ç–≤—ã–π', '—Å–≤–æ–±–æ–¥–Ω—ã–π', '–∑–∞–Ω—è—Ç—ã–π',
            '–ø–æ–ª–Ω—ã–π', '–ø—É—Å—Ç–æ–π', '–æ—Ç–∫—Ä—ã—Ç—ã–π', '–∑–∞–∫—Ä—ã—Ç—ã–π', '—Å—á–∞—Å—Ç–ª–∏–≤—ã–π', '–≥—Ä—É—Å—Ç–Ω—ã–π', '–≤–µ—Å—ë–ª—ã–π', '—Å–µ—Ä—å—ë–∑–Ω—ã–π',
            '–ª—ë–≥–∫–∏–π', '—Ç—è–∂—ë–ª—ã–π', '–¥–æ—Ä–æ–≥–æ–π', '–¥–µ—à—ë–≤—ã–π', '–±–æ–≥–∞—Ç—ã–π', '–±–µ–¥–Ω—ã–π', '—É–º–Ω—ã–π', '–≥–ª—É–ø—ã–π', '—á–µ—Å—Ç–Ω—ã–π', '–ª–∂–∏–≤—ã–π',
            '–¥–æ–±—Ä—ã–π', '–∑–ª–æ–π', '–º–∏—Ä–Ω—ã–π', '–≤–æ–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π', '—Å–ø–æ–∫–æ–π–Ω—ã–π', '–±–µ—Å–ø–æ–∫–æ–π–Ω—ã–π', '–∞–∫—Ç–∏–≤–Ω—ã–π', '–ø–∞—Å—Å–∏–≤–Ω—ã–π',
            '—Ç–≤–æ—Ä—á–µ—Å–∫–∏–π', '—Å–º–µ–ª—ã–π', '—Ç—Ä—É—Å–ª–∏–≤—ã–π', '—Å–∏–ª—å–Ω—ã–π', '—Å–ª–∞–±—ã–π', '–∑–¥–æ—Ä–æ–≤—ã–π', '–±–æ–ª—å–Ω–æ–π', '–≥–æ—Ä—è—á–∏–π', '—Ö–æ–ª–æ–¥–Ω—ã–π',
            '—Ç—ë–ø–ª—ã–π', '–ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–π', '—Å–≤–µ—Ç–ª—ã–π', '—Ç—ë–º–Ω—ã–π', '–≥—Ä–æ–º–∫–∏–π', '—Ç–∏—Ö–∏–π', '–º—è–≥–∫–∏–π', '—Ç–≤—ë—Ä–¥—ã–π', '–æ—Å—Ç—Ä—ã–π', '—Ç—É–ø–æ–π',
            '–±—ã—Å—Ç—Ä—ã–π', '–º–µ–¥–ª–µ–Ω–Ω—ã–π', '–≤–∞–∂–Ω—ã–π', '–Ω–µ–≤–∞–∂–Ω—ã–π', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π', '—Å–∫—É—á–Ω—ã–π', '–ø–æ–ª–µ–∑–Ω—ã–π', '–≤—Ä–µ–¥–Ω—ã–π'
        ]
        
        return common_words
    
    def is_valid_word(self, word: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ –≤–∞–ª–∏–¥–Ω—ã–º —Ä—É—Å—Å–∫–∏–º —Å–ª–æ–≤–æ–º"""
        if not word or len(word) < 2 or len(word) > 20:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ–≤–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã
        if not re.match(r'^[–ê-–Ø–∞-—è–Å—ë]+$', word):
            return False
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–≤–∞
        exclude_words = [
            '–∫–∞—Ç–µ–≥–æ—Ä–∏—è', '—Å—Ç—Ä–∞–Ω–∏—Ü–∞', '–≤–∏–∫–∏', '—Å—Å—ã–ª–∫–∞', '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', '–æ–±—Å—É–∂–¥–µ–Ω–∏–µ',
            '–∏—Å—Ç–æ—Ä–∏—è', '—Å–æ–∑–¥–∞—Ç—å', '–ø–æ–∏—Å–∫', '–Ω–∞–≤–∏–≥–∞—Ü–∏—è', '–º–µ–Ω—é', '–∑–∞–≥–æ–ª–æ–≤–æ–∫'
        ]
        
        if word.lower() in exclude_words:
            return False
        
        return True
    
    def clean_word(self, word: str) -> str:
        """–û—á–∏—â–∞–µ—Ç —Å–ª–æ–≤–æ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        word = word.strip()
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        word = word.lower()
        
        return word
    
    def categorize_words(self, words: List[str]) -> Dict[str, List[str]]:
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞ –ø–æ —Ç–∏–ø–∞–º"""
        categories = {
            'nature': [],      # –ü—Ä–∏—Ä–æ–¥–∞
            'animals': [],     # –ñ–∏–≤–æ—Ç–Ω—ã–µ
            'people': [],      # –õ—é–¥–∏
            'professions': [], # –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏
            'home': [],        # –î–æ–º –∏ –±—ã—Ç
            'food': [],        # –ï–¥–∞
            'clothing': [],    # –û–¥–µ–∂–¥–∞
            'transport': [],   # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
            'city': [],        # –ì–æ—Ä–æ–¥
            'time': [],        # –í—Ä–µ–º—è
            'colors': [],      # –¶–≤–µ—Ç–∞
            'qualities': [],   # –ö–∞—á–µ—Å—Ç–≤–∞
            'other': []        # –ü—Ä–æ—á–µ–µ
        }
        
        # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
        nature_words = ['—Å–æ–ª–Ω—Ü–µ', '–ª—É–Ω–∞', '–∑–≤–µ–∑–¥–∞', '–Ω–µ–±–æ', '–¥–æ–∂–¥—å', '—Å–Ω–µ–≥', '–≤–µ—Ç–µ—Ä', '—Ä–µ–∫–∞', '–º–æ—Ä–µ', '–≥–æ—Ä–∞', '–ª–µ—Å', '–¥–µ—Ä–µ–≤–æ', '—Ü–≤–µ—Ç–æ–∫']
        animal_words = ['—Å–æ–±–∞–∫–∞', '–∫–æ—à–∫–∞', '–ª–æ—à–∞–¥—å', '–∫–æ—Ä–æ–≤–∞', '–ø—Ç–∏—Ü–∞', '—Ä—ã–±–∞', '–≤–æ–ª–∫', '–º–µ–¥–≤–µ–¥—å', '–ª–∏—Å–∞', '–∑–∞—è—Ü']
        people_words = ['—á–µ–ª–æ–≤–µ–∫', '–º—É–∂—á–∏–Ω–∞', '–∂–µ–Ω—â–∏–Ω–∞', '—Ä–µ–±—ë–Ω–æ–∫', '–º–∞—Ç—å', '–æ—Ç–µ—Ü', '—Å—ã–Ω', '–¥–æ—á—å', '–±—Ä–∞—Ç', '—Å–µ—Å—Ç—Ä–∞']
        profession_words = ['—É—á–∏—Ç–µ–ª—å', '–≤—Ä–∞—á', '–ø–æ–≤–∞—Ä', '–≤–æ–¥–∏—Ç–µ–ª—å', '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å', '—Ö—É–¥–æ–∂–Ω–∏–∫', '–ø–∏—Å–∞—Ç–µ–ª—å', '–º—É–∑—ã–∫–∞–Ω—Ç']
        home_words = ['–¥–æ–º', '–∫–≤–∞—Ä—Ç–∏—Ä–∞', '–∫–æ–º–Ω–∞—Ç–∞', '–∫—É—Ö–Ω—è', '–æ–∫–Ω–æ', '–¥–≤–µ—Ä—å', '—Å—Ç–æ–ª', '—Å—Ç—É–ª', '–∫—Ä–æ–≤–∞—Ç—å', '—à–∫–∞—Ñ']
        food_words = ['—Ö–ª–µ–±', '–º—è—Å–æ', '—Ä—ã–±–∞', '–º–æ–ª–æ–∫–æ', '—Å—ã—Ä', '—è–π—Ü–æ', '–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å', '—è–±–ª–æ–∫–æ', '—á–∞–π', '–∫–æ—Ñ–µ']
        clothing_words = ['—Ä—É–±–∞—à–∫–∞', '–ø–ª–∞—Ç—å–µ', '–±—Ä—é–∫–∏', '–ø–∏–¥–∂–∞–∫', '—à–∞–ø–∫–∞', '–æ–±—É–≤—å', '—Ç—É—Ñ–ª–∏', '—Å–∞–ø–æ–≥–∏']
        transport_words = ['–º–∞—à–∏–Ω–∞', '–∞–≤—Ç–æ–±—É—Å', '–ø–æ–µ–∑–¥', '—Å–∞–º–æ–ª—ë—Ç', '–∫–æ—Ä–∞–±–ª—å', '–≤–µ–ª–æ—Å–∏–ø–µ–¥', '–º–æ—Ç–æ—Ü–∏–∫–ª']
        city_words = ['—É–ª–∏—Ü–∞', '–¥–æ—Ä–æ–≥–∞', '–ø–ª–æ—â–∞–¥—å', '–ø–∞—Ä–∫', '–º–∞–≥–∞–∑–∏–Ω', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–±–æ–ª—å–Ω–∏—Ü–∞', '—à–∫–æ–ª–∞']
        time_words = ['–≤—Ä–µ–º—è', '—á–∞—Å', '–¥–µ–Ω—å', '–Ω–µ–¥–µ–ª—è', '–º–µ—Å—è—Ü', '–≥–æ–¥', '—É—Ç—Ä–æ', '–≤–µ—á–µ—Ä', '–Ω–æ—á—å']
        color_words = ['–∫—Ä–∞—Å–Ω—ã–π', '—Å–∏–Ω–∏–π', '–∑–µ–ª—ë–Ω—ã–π', '–∂—ë–ª—Ç—ã–π', '—á—ë—Ä–Ω—ã–π', '–±–µ–ª—ã–π', '—Å–µ—Ä—ã–π']
        quality_words = ['–±–æ–ª—å—à–æ–π', '–º–∞–ª–µ–Ω—å–∫–∏–π', '—Ö–æ—Ä–æ—à–∏–π', '–ø–ª–æ—Ö–æ–π', '–∫—Ä–∞—Å–∏–≤—ã–π', '–Ω–æ–≤—ã–π', '—Å—Ç–∞—Ä—ã–π']
        
        for word in words:
            if word in nature_words:
                categories['nature'].append(word)
            elif word in animal_words:
                categories['animals'].append(word)
            elif word in people_words:
                categories['people'].append(word)
            elif word in profession_words:
                categories['professions'].append(word)
            elif word in home_words:
                categories['home'].append(word)
            elif word in food_words:
                categories['food'].append(word)
            elif word in clothing_words:
                categories['clothing'].append(word)
            elif word in transport_words:
                categories['transport'].append(word)
            elif word in city_words:
                categories['city'].append(word)
            elif word in time_words:
                categories['time'].append(word)
            elif word in color_words:
                categories['colors'].append(word)
            elif word in quality_words:
                categories['qualities'].append(word)
            else:
                categories['other'].append(word)
        
        return categories
    
    def save_to_json(self, data: Dict, filename: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤...")
        
        # –ü–∞—Ä—Å–∏–º –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        wiktionary_words = self.parse_wiktionary()
        open_sources_words = self.parse_open_sources()
        common_words = self.parse_common_words()
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–ª–æ–≤–∞
        all_words = set(wiktionary_words + open_sources_words + common_words)
        
        # –û—á–∏—â–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º
        cleaned_words = []
        for word in all_words:
            cleaned = self.clean_word(word)
            if self.is_valid_word(cleaned):
                cleaned_words.append(cleaned)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        unique_words = sorted(list(set(cleaned_words)))
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞
        categorized_words = self.categorize_words(unique_words)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        result = {
            'words': unique_words,
            'categorizedWords': categorized_words,
            'totalWords': len(unique_words),
            'sources': [
                '–í–∏–∫–∏—Å–ª–æ–≤–∞—Ä—å - –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤',
                '–û—Ç–∫—Ä—ã—Ç—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–æ —Å–ª–æ–≤–∞—Ä—è–º–∏',
                '–ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–ª–æ–≤'
            ],
            'lastUpdated': time.strftime('%Y-%m-%d %H:%M:%S')
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.save_to_json(result, '../src/data/parsed_words.json')
        
        print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤: {len(unique_words)}")
        print(f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categorized_words)}")

if __name__ == "__main__":
    parser = RussianWordsParser()
    parser.run()
