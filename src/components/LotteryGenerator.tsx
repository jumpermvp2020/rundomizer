'use client'

import { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { Button } from '@/components/ui/button'
import { Card } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { RefreshCw, Share2, Plus, X, Users } from 'lucide-react'

interface LotteryResult {
    winner: string
    timestamp: number
}

export default function LotteryGenerator() {
    const [participantList, setParticipantList] = useState<string[]>([])
    const [newParticipant, setNewParticipant] = useState('')
    const [result, setResult] = useState<LotteryResult | null>(null)
    const [isSpinning, setIsSpinning] = useState(false)

    const addParticipant = () => {
        const trimmedName = newParticipant.trim()

        if (!trimmedName) {
            alert('–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞')
            return
        }

        if (participantList.includes(trimmedName)) {
            alert('–≠—Ç–æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω')
            return
        }

        if (participantList.length >= 1000) {
            alert('–ú–∞–∫—Å–∏–º—É–º 1,000 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
            return
        }

        setParticipantList([...participantList, trimmedName])
        setNewParticipant('')
    }

    const removeParticipant = (index: number) => {
        setParticipantList(participantList.filter((_, i) => i !== index))
    }

    const clearAllParticipants = () => {
        setParticipantList([])
        setResult(null)
    }

    const conductLottery = () => {
        if (participantList.length === 0) {
            alert('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞')
            return
        }

        setIsSpinning(true)

        // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º crypto.getRandomValues –¥–ª—è —á–µ—Å—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            const array = new Uint32Array(1)
            crypto.getRandomValues(array)
            const randomIndex = array[0] % participantList.length

            setResult({
                winner: participantList[randomIndex],
                timestamp: Date.now()
            })
            setIsSpinning(false)
        }, 2000) // –î–ª–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ "–∫–æ–ª–µ—Å–∞ —Ñ–æ—Ä—Ç—É–Ω—ã"
    }

    const shareResult = () => {
        if (result === null) return

        const text = `–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∂—Ä–µ–±–∏—è: ${result.winner}`
        navigator.clipboard.writeText(text)
        alert('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!')
    }

    const handleKeyPress = (e: React.KeyboardEvent) => {
        if (e.key === 'Enter') {
            e.preventDefault()
            addParticipant()
        }
    }

    return (
        <Card className="p-8 bg-white rounded-2xl shadow-sm border-0">
            <div className="space-y-6">
                {/* –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
                <div>
                    <label htmlFor="newParticipant" className="text-sm font-medium text-[#4B5563] block mb-2">
                        –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
                    </label>
                    <div className="flex gap-2">
                        <Input
                            id="newParticipant"
                            value={newParticipant}
                            onChange={(e) => setNewParticipant(e.target.value)}
                            onKeyPress={handleKeyPress}
                            className="flex-1"
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞..."
                        />
                        <Button
                            onClick={addParticipant}
                            disabled={!newParticipant.trim() || participantList.length >= 50}
                            className="bg-[#111111] hover:bg-[#333333] text-white px-4"
                        >
                            <Plus className="w-4 h-4" />
                        </Button>
                    </div>
                    <div className="text-xs text-[#9CA3AF] mt-1">
                        –ù–∞–∂–º–∏—Ç–µ Enter –∏–ª–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è. –ú–∞–∫—Å–∏–º—É–º 50 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    </div>
                </div>

                {/* –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
                {participantList.length > 0 && (
                    <div>
                        <div className="flex items-center justify-between mb-3">
                            <div className="flex items-center gap-2">
                                <Users className="w-4 h-4 text-[#4B5563]" />
                                <span className="text-sm font-medium text-[#4B5563]">
                                    –£—á–∞—Å—Ç–Ω–∏–∫–∏ ({participantList.length})
                                </span>
                            </div>
                            <Button
                                variant="outline"
                                size="sm"
                                onClick={clearAllParticipants}
                                className="text-[#9CA3AF] border-[#D1D5DB] hover:bg-red-50 hover:text-red-600 hover:border-red-200"
                            >
                                –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
                            </Button>
                        </div>
                        <div className="space-y-2 max-h-48 overflow-y-auto">
                            <AnimatePresence>
                                {participantList.map((participant, index) => (
                                    <motion.div
                                        key={`${participant}-${index}`}
                                        initial={{ opacity: 0, x: -20 }}
                                        animate={{ opacity: 1, x: 0 }}
                                        exit={{ opacity: 0, x: 20 }}
                                        className="flex items-center justify-between bg-gray-50 rounded-lg p-3"
                                    >
                                        <span className="text-[#1A1A1A] font-medium">
                                            {participant}
                                        </span>
                                        <Button
                                            variant="ghost"
                                            size="sm"
                                            onClick={() => removeParticipant(index)}
                                            className="text-[#9CA3AF] hover:text-red-600 hover:bg-red-50 p-1 h-auto"
                                        >
                                            <X className="w-4 h-4" />
                                        </Button>
                                    </motion.div>
                                ))}
                            </AnimatePresence>
                        </div>
                    </div>
                )}

                {/* –ö–Ω–æ–ø–∫–∞ –∂—Ä–µ–±–∏—è */}
                <div className="text-center">
                    <motion.div
                        animate={isSpinning ? { scale: [1, 1.05, 1] } : {}}
                        transition={{ duration: 0.6, repeat: isSpinning ? Infinity : 0 }}
                    >
                        <Button
                            onClick={conductLottery}
                            disabled={isSpinning || participantList.length === 0}
                            className="bg-[#111111] hover:bg-[#333333] text-white px-12 py-4 text-xl font-medium rounded-xl disabled:opacity-50"
                        >
                            {isSpinning ? '–ü—Ä–æ–≤–æ–¥–∏–º –∂—Ä–µ–±–∏–π...' : '–ü—Ä–æ–≤–µ—Å—Ç–∏ –∂—Ä–µ–±–∏–π'}
                        </Button>
                    </motion.div>
                </div>

                {/* –†–µ–∑—É–ª—å—Ç–∞—Ç */}
                <div className="text-center">
                    <AnimatePresence mode="wait">
                        {result ? (
                            <motion.div
                                key={result.winner}
                                initial={{ opacity: 0, scale: 0.5, rotate: -180 }}
                                animate={{ opacity: 1, scale: 1, rotate: 0 }}
                                exit={{ opacity: 0, scale: 0.5, rotate: 180 }}
                                transition={{ duration: 0.8, ease: "easeOut" }}
                                className="space-y-4"
                            >
                                <div className="bg-gradient-to-br from-[#FCE7D7] to-[#F9F5FF] rounded-2xl p-8 mx-auto max-w-md">
                                    <div className="text-3xl font-bold text-[#1A1A1A] mb-2">
                                        üéâ
                                    </div>
                                    <div className="text-2xl font-bold text-[#1A1A1A] mb-2">
                                        {result.winner}
                                    </div>
                                    <div className="text-lg text-[#4B5563]">
                                        –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∂—Ä–µ–±–∏—è
                                    </div>
                                </div>
                            </motion.div>
                        ) : (
                            <motion.div
                                initial={{ opacity: 0 }}
                                animate={{ opacity: 1 }}
                                className="text-6xl md:text-7xl font-bold text-[#9CA3AF] mb-4"
                            >
                                üé≤
                            </motion.div>
                        )}
                    </AnimatePresence>
                </div>

                {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
                {result && (
                    <motion.div
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        className="flex justify-center gap-4"
                    >
                        <Button
                            variant="outline"
                            onClick={conductLottery}
                            className="text-[#4B5563] border-[#D1D5DB] hover:bg-[#F9F5FF]"
                        >
                            <RefreshCw className="w-4 h-4 mr-2" />
                            –ï—â—ë —Ä–∞–∑
                        </Button>
                        <Button
                            variant="outline"
                            onClick={shareResult}
                            className="text-[#4B5563] border-[#D1D5DB] hover:bg-[#F9F5FF]"
                        >
                            <Share2 className="w-4 h-4 mr-2" />
                            –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
                        </Button>
                    </motion.div>
                )}

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                <div className="text-center text-sm text-[#9CA3AF]">
                    <p>–ß–µ—Å—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∂—Ä–µ–±–∏—è</p>
                    <p>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä</p>
                </div>
            </div>
        </Card>
    )
}
